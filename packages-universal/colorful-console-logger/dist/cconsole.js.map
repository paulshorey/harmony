{"mappings":"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","sources":["src/function/destroyCircular.js","src/function/serializeError.js","src/function/CConsoleLog.js","src/index.js","src/cconsole.js"],"sourcesContent":["const destroyCircular = (from, seen) => {\n  // null seen as object\n  if (from === null || from === undefined) {\n    return from\n  }\n  // setup output variable\n  const to = Array.isArray(from) ? [] : {}\n  // reading\n  seen.push(from)\n  // iterate input\n  for (const [key, value] of Object.entries(from)) {\n    if (typeof value === 'function') {\n      continue\n    }\n    if (!value || typeof value !== 'object') {\n      to[key] = value\n      continue\n    }\n    if (!seen.includes(from[key])) {\n      to[key] = destroyCircular(from[key], seen.slice())\n      continue\n    }\n    to[key] = '[Circular]'\n  }\n  const commonProperties = [\n    'name',\n    'message',\n    'stack',\n    'code'\n  ]\n  for (const property of commonProperties) {\n    if (typeof from[property] === 'string') {\n      to[property] = from[property]\n    }\n  }\n  return to\n}\nmodule.exports = destroyCircular\n","const destroyCircular = require('./destroyCircular')\n\nmodule.exports = (value) => {\n  if (typeof value === 'object') {\n    return destroyCircular(value, [])\n  }\n  // People sometimes throw things besides Error objectsâ€¦\n  if (typeof value === 'function') {\n    // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n    return `[Function: ${(value.name || 'anonymous')}]`\n  }\n  return value\n}\n","const destroyCircular = require(\"./destroyCircular\");\nconst serializeError = require(\"./serializeError\");\n\n// use \"browser\" colors if in browser\nlet NODEJSCOLORS = typeof window !== \"object\";\n// also use \"browser\" colors if in NodeJS with \"--inspect\" or \"--inspect-brk\" flag\n// if (NODEJSCOLORS && process.execArgv.join().includes(\"--inspect\")) {\n//   NODEJSCOLORS = false\n// }\n\n/*\n * Log to console\n */\nmodule.exports = function () {\n  let args = [...arguments];\n  // optionally, pass log-To-Cloud versions of each log action (log,info,error,etc.)\n  if (!this.options) this.options = {};\n  let { logToCloud = {}, useTrace = false, useColor = true, separateTypes = false } = this.options;\n\n  /*\n   * option:\n   * trace file:line, where log originated\n   */\n  let trace = \"\";\n  if (useTrace) {\n    let stack = [];\n    let err = new Error();\n    if (err.stack) {\n      stack = err.stack.split(\"\\n\");\n      if (stack[2]) {\n        // determine file:line which called this console log\n        let str = stack[2];\n        let i_end = str.lastIndexOf(\":\");\n        let i_start_before = str.lastIndexOf(\"/\", i_end - 20) + 1;\n        trace = `(${str.substring(i_start_before, i_end)})`;\n      }\n    }\n  }\n\n  /*\n   * optimize message view\n   */\n  // let hasError = false\n  let a = 0;\n  while (a < args.length) {\n    // if first argument is string, give it a colon \": \"\n    if (a === 0 && typeof args[a] === \"string\") {\n      if (args.length > a + 1) {\n        args[a] += \": \";\n      } else {\n        args[a] += \" \";\n      }\n    }\n    // fix object from being printed as \"[object Object]\"\n    if (typeof args[a] === \"object\") {\n      if (args[a] instanceof Error) {\n        // error object\n        // hasError = true\n        try {\n          // going to assume this is an Error\n          args[a] = serializeError(args[a]);\n          if (typeof args[a] === \"object\") {\n            args[a] = serializeError(args[a].stack);\n          }\n        } catch (e) {\n          // console.error(e)\n        }\n      } else {\n        // regular object\n        // serialize so it does not display changes made after log has printed\n        args[a] = JSON.parse(JSON.stringify(destroyCircular(args[a], [])));\n      }\n    }\n    a++;\n  }\n\n  /*\n   * error - prepare message for output as string\n   */\n  let error_message = \"\";\n  if (this.action === \"error_message\") {\n    args[0] = error_message =\n      args[0] && typeof args[0] === \"string\"\n        ? args[0]\n            .split(\"\\n\")\n            .slice(0, 2)\n            .map((str) => str.replace(/\\/.+\\//g, \"\"))\n            .toString()\n        : \"error\";\n    this.action = \"error\";\n  }\n\n  /*\n   * color1 messages\n   *\n   * on NODE JS\n   * https://en.wikipedia.org/wiki/ANSI_escape_code#Colors <- use \"FG Code\" for text, \"BG Code\" for background\n   *\n   * \\x1b[41m     \\x1b[33m       %s        \\x1b[0m\n   * red bg       yellow text    string    escape for next line\n   *\n   * \\x1b[47m           \\x1b[30m       %s        \\x1b[0m\n   * light grey bg      black text     string    escape for next line\n   */\n  let action = this.action;\n  let color1 = \"\";\n  let color2 = \"\";\n  if (useColor && typeof args[0] === \"string\") {\n    /*\n     * use by NODEJS in terminal\n     */\n    if (NODEJSCOLORS) {\n      switch (this.action) {\n        case \"error\":\n          color1 = \"\\x1b[41m\\x1b[33m%s\\x1b[0m\";\n          break;\n        case \"warn\":\n          color1 = \"\\x1b[43m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"info\":\n          color1 = \"\\x1b[46m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"debug\":\n          color1 = \"\\x1b[45m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"trace\":\n          color1 = \"\\x1b[106m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"success\":\n          color1 = \"\\x1b[42m\\x1b[30m%s\\x1b[0m\";\n          this.action = \"log\";\n          break;\n        case \"subtle\":\n          color1 = \"\\x1b[40m\\x1b[90m%s\\x1b[0m\";\n          this.action = \"log\";\n          break;\n      }\n    } else {\n      /*\n       * for use in BROWSER\n       */\n      switch (action) {\n        case \"error\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:red; color:yellow\");\n          break;\n        case \"warn\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:yellow; color:black\");\n          break;\n        case \"log\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:cyan; color:black\");\n          break;\n        case \"info\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:teal; color:black\");\n          break;\n        case \"debug\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:magenta; color:black\");\n          break;\n        case \"trace\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:cyan; color:black\");\n          break;\n        case \"success\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:lawngreen; color:black\");\n          break;\n        case \"subtle\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"color:grey\");\n          break;\n      }\n    }\n  }\n\n  /*\n   * custom actions\n   */\n  switch (action) {\n    case \"success\":\n      action = \"log\";\n      break;\n    case \"subtle\":\n      action = \"log\";\n      break;\n  }\n\n  /*\n   * Add space between different types (groups) of messages\n   *    TODO: maybe upgrade this to use console.group in browser\n   */\n  if (separateTypes) {\n    if (action + this.action !== this.sharedContext.last_action) {\n      console.log(\"\");\n    }\n  }\n\n  /*\n   * Add trace (file-name:line-number)\n   */\n  // log color\n  if (color1) {\n    if (trace) {\n      // color1, trace\n      args = [color1, ...args, trace, color2];\n    } else {\n      // color1, no trace\n      args = [color1, ...args, color2];\n    }\n  } else if (trace) {\n    // no color1, trace\n    args = [...args, trace];\n  }\n\n  /*\n   * Log message to console\n   * use specified action (log, info, debug, warn, etc)\n   */\n  console[action](...args);\n\n  /*\n   * Log original content to cloud\n   */\n  if (logToCloud[action]) {\n    logToCloud[action](...arguments, trace);\n  }\n\n  /*\n   * Add linebreak when different actions back to back\n   * but no linebreak when same action\n   */\n  this.sharedContext.last_action = action + this.action;\n\n  /*\n   * return\n   */\n  if (error_message) {\n    return error_message;\n  }\n};\n","const CConsoleLog = require( \"./function/CConsoleLog\")\n\n/**\n * Log to console, and optionally to your custom cloud functions\n *    In console, will color code each message:\n *        info: green\n *        warn: orange\n *        error: red\n *    Other methods (log, debug, trace, table, are not colored,\n *    because the coloring breaks Chrome developer tools console message)\n *\n * @param options {object} - options and settings\n *    See github project for more documentation and examples.\n * @param options.logToCloud {object} - an object of {key:value{function},} pairs\n *    Ex: {log:function(){}, info:function(){}, etc}\n *    Tested, and works well with LogDNA. `options.logToCloud = logdna.createLogger()`\n *    See github project for more documentation and examples.\n */\nconst cconsoleInit = function(options={}) {\n  // so different actions (log/info/debug/etc) can communicate with eachother:\n  let sharedContext = {}\n  // log\n  let cconsole = {\n    // custom (colorful) loggers\n    log: CConsoleLog.bind({ action: \"log\", options, sharedContext }),\n    info: CConsoleLog.bind({ action: \"info\", options, sharedContext }),\n    debug: CConsoleLog.bind({ action: \"debug\", options, sharedContext }),\n    warn: CConsoleLog.bind({ action: \"warn\", options, sharedContext }),\n    error_message: CConsoleLog.bind({ action: \"error_message\", options, sharedContext }),\n    error: CConsoleLog.bind({ action: \"error\", options, sharedContext }),\n    trace: CConsoleLog.bind({ action: \"trace\", options, sharedContext }),\n    success: CConsoleLog.bind({ action: \"success\", options, sharedContext }),\n    subtle: CConsoleLog.bind({ action: \"subtle\", options, sharedContext }),\n    // pass-through system debugging loggers\n    clear: console.clear,\n    time: console.time,\n    table: console.table,\n    timeEnd: console.timeEnd,\n    timeLog: console.timeLog,\n    assert: console.assert,\n    count: console.count,\n    countReset: console.countReset,\n    dir: console.dir,\n    dirxml: console.dirxml,\n    group: console.group,\n    groupCollapsed: console.groupCollapsed,\n    groupEnd: console.groupEnd\n  }\n  // extra pass-through (default) loggers (non-standard)\n  if (console.profile) {\n    cconsole.profile = console.profile\n  }\n  if (console.profileEnd) {\n    cconsole.profileEnd = console.profileEnd\n  }\n  if (console.timeStamp) {\n    cconsole.timeStamp = console.timeStamp\n  }\n  // return console\n  return cconsole\n}\n\n/*\n * Export cconsole\n */\nmodule.exports = cconsoleInit\n","/*\n * This is for use in Browser - however it will also work in Node (ESM) including Webpack\n *\n * Returns - initialized, ready to use\n */\nconst cconsoleInit = require(\"./index.js\");\n\nif (typeof window === \"object\") {\n  window.cconsole = cconsoleInit();\n}\n\nmodule.exports = cconsoleInit();\n"],"names":["$50d7aa4277cbb60b$var$destroyCircular","from","seen","to","Array","isArray","push","key","value","Object","entries","includes","slice","commonProperties","property","$50d7aa4277cbb60b$exports","$a2cda4812aa3531b$exports","name","$ebc01b43a0d2ab5b$var$NODEJSCOLORS","window","$ebc01b43a0d2ab5b$exports","args","arguments","this","options","logToCloud","useTrace","useColor","separateTypes","trace","stack","err","Error","split","str","i_end","lastIndexOf","i_start_before","substring","a","length","e","JSON","parse","stringify","error_message","action","map","replace","toString","color1","color2","splice","sharedContext","last_action","console","log","$cb0424350523ac33$exports","cconsole","bind","info","debug","warn","error","success","subtle","clear","time","table","timeEnd","timeLog","assert","count","countReset","dir","dirxml","group","groupCollapsed","groupEnd","profile","profileEnd","timeStamp"],"version":3,"file":"cconsole.js.map"}