import { styleProps } from '@ps/ui/types/styles';

/*
 * The name of the component. Unique per component. When looking in the browser Dev Tools, know which div was generated by which component.
 */
type ComponentName = styleProps['componentName'];
type Props = styleProps;

/**
 * Modify data- attributes so CSS can "Cascade" (add light/dark colors based on parents and grandparents)
 */
export default (
  componentName: ComponentName,
  { bgcolor, bggradient, textcolor, textgradient, ...props }: Props
): any => {
  /*
   * Add className specificity
   */
  if (!props.componentName) {
    props.componentName = componentName;
  }
  props.className = (props.className || '') + ' ' + props.componentName;
  /*
   * Color Scheme
   */
  if (bgcolor || bggradient) {
    props['data-bgcolor'] = bgcolor || bggradient;
    if (bggradient) {
      props['data-bggradient'] = bggradient;
    }
  }
  if (textcolor || textgradient) {
    props['data-textcolor'] = textcolor || textgradient;
    if (textgradient) {
      props['data-textgradient'] = textgradient;
    }
  }
  if (props['data-textcolor'] === 'light') {
    props['data-colorscheme'] = 'dark';
  } else if (props['data-textcolor'] === 'dark') {
    props['data-colorscheme'] = 'light';
  } else if (props['data-bgcolor'] === 'light') {
    props['data-colorscheme'] = 'light';
  } else if (props['data-bgcolor'] === 'dark') {
    props['data-colorscheme'] = 'dark';
  } else if (props['data-bggradient'] === 'light') {
    props['data-colorscheme'] = 'light';
  } else if (props['data-bggradient'] === 'dark') {
    props['data-colorscheme'] = 'dark';
  }
  /*
   * Component name to recognize DOM HTML in browser Dev Tools
   */
  // props['data-component'] = componentNameProp || componentName;
  /*
   * Clean up no longer needed props
   */
  // delete props.componentName;
  // delete props.textcolor;
  // delete props.textgradient;
  // delete props.bgcolor;
  // delete props.bggradient;
};

// /*
//  * Optional - (NOT USED CURRENTLY) Imported CSS Modules file. From `index.module.css` in the same folder as your  component. CSS Modules act like classic CSS Stylesheets. They allow the scoped style to reference parent/grandparent DOM elements. See if your current component is rendered inside a "light" or "dark", "purple" or "orange" section. JS can't see that.
//  */
// cssModule?: Record<string, string>;

// /*
//  * Add CSS Modules
//  * Too complicated - can't edit props
//  */
// // if (cssModule) {
// //   if (!props.className) {
// //     props.className = '';
// //   }
// //   if (cssModule.default) {
// //     props.className += ' ' + cssModule.default;
// //   }
// //   if (variant && cssModule[variant]) {
// //     props.className += ' ' + cssModule[variant];
// //   }
// // }
