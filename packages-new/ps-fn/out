System.register("io/arr/arr_clone", [], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    /**
     * Deep copy an array
     * @param {array} arr
     * @returns {array}
     */
    function arr_clone(arr) {
        return arr.map((item) => (Array.isArray(item) ? arr_clone(item) : item));
    }
    exports_1("default", arr_clone);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/arr_fill", [], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    /**
     * Create a new array, and fill it with values (all same value)
     * @param {*} value - what value to assign to each item in array
     * @param {number} len - how long to make the array
     * @returns {array}
     */
    function arr_fill(value, len) {
        return new Array(len).fill(value);
    }
    exports_2("default", arr_fill);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/arr_from_value", [], function (exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    /**
     * Create an array
     */
    function arr_from_value(value, len) {
        let arr = [];
        for (let i = 0; i < len; i++) {
            arr.push(value);
        }
        return arr;
    }
    exports_3("default", arr_from_value);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/arr_includes", [], function (exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    /**
     * Similarities between arrays A and B
     * @returns - array of values which appear in both A and B
     */
    function arr_includes(a = [], b = []) {
        return a.filter(function (i) {
            return b.includes(i);
        });
    }
    exports_4("default", arr_includes);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/arr_remove_item", [], function (exports_5, context_5) {
    "use strict";
    var __moduleName = context_5 && context_5.id;
    /**
     * Remove an item (if exact match string/number) from array
     */
    function arr_remove_item(arr = [], item) {
        return arr.filter((it) => it !== item);
    }
    exports_5("default", arr_remove_item);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/arr_truthy_values", [], function (exports_6, context_6) {
    "use strict";
    var __moduleName = context_6 && context_6.id;
    /**
     * Array with empty/falsy values removed.
     */
    function arr_truthy_values(arr) {
        return arr.filter((val) => !!val);
    }
    exports_6("default", arr_truthy_values);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/is_arr", [], function (exports_7, context_7) {
    "use strict";
    var __moduleName = context_7 && context_7.id;
    /**
     * Is array?
     */
    function is_arr(variable) {
        return variable && typeof variable === "object" && Array.isArray(variable);
    }
    exports_7("default", is_arr);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/arr_not_empty", [], function (exports_8, context_8) {
    "use strict";
    var __moduleName = context_8 && context_8.id;
    /**
     * Is array? And not empty?
     */
    function default_1(variable) {
        return variable && typeof variable === "object" && Array.isArray(variable) && variable.length > 0;
    }
    exports_8("default", default_1);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arr/index", ["io/arr/arr_clone", "io/arr/arr_fill", "io/arr/arr_from_value", "io/arr/arr_includes", "io/arr/arr_remove_item", "io/arr/arr_truthy_values", "io/arr/is_arr", "io/arr/arr_not_empty"], function (exports_9, context_9) {
    "use strict";
    var arr_clone_1, arr_fill_1, arr_from_value_1, arr_includes_1, arr_remove_item_1, arr_truthy_values_1, is_arr_1, arr_not_empty_1, arr_clone, arr_fill, arr_from_value, arr_includes, arr_remove_item, arr_truthy_values, arr_not_empty, is_arr;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (arr_clone_1_1) {
                arr_clone_1 = arr_clone_1_1;
            },
            function (arr_fill_1_1) {
                arr_fill_1 = arr_fill_1_1;
            },
            function (arr_from_value_1_1) {
                arr_from_value_1 = arr_from_value_1_1;
            },
            function (arr_includes_1_1) {
                arr_includes_1 = arr_includes_1_1;
            },
            function (arr_remove_item_1_1) {
                arr_remove_item_1 = arr_remove_item_1_1;
            },
            function (arr_truthy_values_1_1) {
                arr_truthy_values_1 = arr_truthy_values_1_1;
            },
            function (is_arr_1_1) {
                is_arr_1 = is_arr_1_1;
            },
            function (arr_not_empty_1_1) {
                arr_not_empty_1 = arr_not_empty_1_1;
            }
        ],
        execute: function () {
            exports_9("arr_clone", arr_clone = arr_clone_1.default);
            exports_9("arr_fill", arr_fill = arr_fill_1.default);
            exports_9("arr_from_value", arr_from_value = arr_from_value_1.default);
            exports_9("arr_includes", arr_includes = arr_includes_1.default);
            exports_9("arr_remove_item", arr_remove_item = arr_remove_item_1.default);
            exports_9("arr_truthy_values", arr_truthy_values = arr_truthy_values_1.default);
            exports_9("arr_not_empty", arr_not_empty = arr_not_empty_1.default);
            exports_9("is_arr", is_arr = is_arr_1.default);
        }
    };
});
System.register("io/arr/_.test", ["io/arr/index"], function (exports_10, context_10) {
    "use strict";
    var _1;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [
            function (_1_1) {
                _1 = _1_1;
            }
        ],
        execute: function () {
            describe("arr", () => {
                it("arr_clone", () => {
                    let obj = _1.arr_clone([{ one: 1 }])[0];
                    expect(obj.one).toEqual(1);
                });
                it("arr_fill", () => {
                    let arr = _1.arr_fill({ one: 1 }, 5);
                    expect(arr[4].one).toEqual(1);
                });
                it("arr_not_empty", () => {
                    expect(_1.arr_not_empty([1])).toEqual(true);
                    expect(_1.arr_not_empty([])).toEqual(false);
                    expect(_1.arr_not_empty({})).toEqual(false);
                    expect(_1.arr_not_empty(null)).toEqual(false);
                    expect(_1.arr_not_empty(undefined)).toEqual(false);
                });
                it("arr_from_value", () => {
                    let arr = _1.arr_from_value("a", 5);
                    expect(arr).toEqual(["a", "a", "a", "a", "a"]);
                });
                it("arr_remove_item", () => {
                    let result = _1.arr_remove_item([1, 2, 3, 4, 5, 6, 7], 4);
                    expect(result).toEqual([1, 2, 3, 5, 6, 7]);
                });
                it("arr_includes", () => {
                    let result = _1.arr_includes([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9]);
                    expect(result).toEqual([4, 5, 6, 7]);
                });
                it("arr_truthy_values", () => {
                    let result = _1.arr_truthy_values([1, 2, 3, 4, 5, 6, 7, 0, "", null, undefined]);
                    expect(result).toEqual([1, 2, 3, 4, 5, 6, 7]);
                });
            });
        }
    };
});
System.register("io/arrays/arrays_merge", [], function (exports_11, context_11) {
    "use strict";
    var __moduleName = context_11 && context_11.id;
    /**
     * Combines two arrays of strings, one item from each array at a time, into new array. Ignores duplicates.
     * Like taking two decks of cards, and making one double deck, by taking one card at a time from each deck.
     * @param arr1 - array of strings
     * @param arr2 - array of strings
     * @return - array of strings, combined from both arrays
     */
    function arrays_merge(arr1, arr2) {
        if (!arr1 && !arr2)
            return [];
        if (!arr1 && arr2)
            return arr2;
        if (arr1 && !arr2)
            return arr1;
        let set = new Set();
        /*
         * setup pointers (will be incremented each time new item is taken from array)
         */
        let ai = {};
        for (let i in arguments) {
            // will be incremented (ai[i]++) before each use
            ai[i] = -1; // on first use will === 0
        }
        /*
         * iterate all passed-in arrays, one by one, take one new item at a time
         */
        for (let y = 0; y < 50; y++) {
            for (let i in arguments) {
                let arr = arguments[i];
                let str = arr[ai[i]++];
                if (str) {
                    set.add(str);
                }
            }
        }
        // console.log('sort_strings_combine_lists list', list);
        return [...set];
        // return arr1;
    }
    exports_11("default", arrays_merge);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arrays/arrays_mix", [], function (exports_12, context_12) {
    "use strict";
    var __moduleName = context_12 && context_12.id;
    /**
     * Mixes multiple lists into one list, by taking one item at a time from each and pushing it to new array.
     */
    function arrays_mix(arrays) {
        let master_list = [];
        // find length of longest array
        let max_length = 0;
        for (let arr of arrays) {
            max_length = Math.max(arr.length, max_length);
        }
        // iterate by index
        // check item at each index in each array
        let index = 0;
        while (true) {
            // add one item from each array
            for (let arr of arrays) {
                if (arr[index]) {
                    // add item if exists
                    master_list.push(arr[index]);
                }
            }
            // next index
            index++;
            if (index >= max_length) {
                break;
            }
        }
        return master_list;
    }
    exports_12("default", arrays_mix);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arrays/arrays_diff", [], function (exports_13, context_13) {
    "use strict";
    var __moduleName = context_13 && context_13.id;
    /**
     * Find all differences between 2 arrays. What values in either one are NOT contained in the other.
     * @returns - returns an array of values which only appear once, not in both arrays
     */
    function arrays_diff(a = [], b = []) {
        let combined = a.concat(b);
        return combined.filter((el) => {
            if (!a.includes(el) || !b.includes(el))
                return el;
        });
    }
    exports_13("default", arrays_diff);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arrays/arrays_subtract", [], function (exports_14, context_14) {
    "use strict";
    var __moduleName = context_14 && context_14.id;
    /**
     * Subtract array B values from array A. Return remaining array A. Expects 2 parameters, each an array.
     *      NOTE: first array A must be the main one. Words also appearing in B will be removed
     * @param a {array} - values we care about. Analyze these, compared to b
     * @param b {array} - for comparison only. Array values unique to B will be ignored
     * @returns {array} - returns an array of values which appear in A but not B
     */
    function arrays_subtract(a = [], b = []) {
        return a.filter(function (i) {
            return !b.includes(i);
        });
    }
    exports_14("default", arrays_subtract);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/arrays/_.test", ["io/arrays/arrays_merge", "io/arrays/arrays_mix", "io/arrays/arrays_diff", "io/arrays/arrays_subtract"], function (exports_15, context_15) {
    "use strict";
    var arrays_merge_1, arrays_mix_1, arrays_diff_1, arrays_subtract_1;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [
            function (arrays_merge_1_1) {
                arrays_merge_1 = arrays_merge_1_1;
            },
            function (arrays_mix_1_1) {
                arrays_mix_1 = arrays_mix_1_1;
            },
            function (arrays_diff_1_1) {
                arrays_diff_1 = arrays_diff_1_1;
            },
            function (arrays_subtract_1_1) {
                arrays_subtract_1 = arrays_subtract_1_1;
            }
        ],
        execute: function () {
            describe("arrays_mix", () => {
                let arr1 = ["a", "b", "c"];
                let arr2 = [1, 2, 3];
                it("mixes two arrays", () => {
                    expect(arrays_mix_1.default([arr1, arr2])).toEqual(["a", 1, "b", 2, "c", 3]);
                });
                it("does not modify original arrays", () => {
                    expect(arr1).toEqual(["a", "b", "c"]);
                    expect(arr2).toEqual([1, 2, 3]);
                });
            });
            describe("arrays_diff", () => {
                let arr1 = [1, 2, 3, 4, 5, 6, 7];
                let arr2 = [4, 5, 6, 7, 8, 9];
                it("keeps only unique values", () => {
                    let diff = arrays_diff_1.default(arr1, arr2);
                    expect(diff).toEqual([1, 2, 3, 8, 9]);
                });
                it("does not modify original arrays", () => {
                    expect(arr1).toEqual([1, 2, 3, 4, 5, 6, 7]);
                    expect(arr2).toEqual([4, 5, 6, 7, 8, 9]);
                });
            });
            describe("arrays_subtract", () => {
                let arr1 = [1, 2, 3, 4, 5, 6, 7];
                let arr2 = [4, 5, 6, 7, 8, 9];
                it("removes arrB values from arrA", () => {
                    let result = arrays_subtract_1.default(arr1, arr2);
                    expect(result).toEqual([1, 2, 3]);
                });
                it("does not modify original arrays", () => {
                    expect(arr1).toEqual([1, 2, 3, 4, 5, 6, 7]);
                    expect(arr2).toEqual([4, 5, 6, 7, 8, 9]);
                });
            });
            describe("arrays_merge", () => {
                const arr1 = ["a", "b", "z", "t"];
                const arr2 = ["a", "z", "b", "c"];
                it("combines array values, ignoring duplicates", () => {
                    expect(arrays_merge_1.default(arr1, arr2)).toEqual(["a", "b", "z", "t", "c"]);
                });
                it("does not modify original arrays", () => {
                    expect(arr1).toEqual(["a", "b", "z", "t"]);
                    expect(arr2).toEqual(["a", "z", "b", "c"]);
                });
            });
        }
    };
});
System.register("io/curry/call_later", [], function (exports_16, context_16) {
    "use strict";
    var __moduleName = context_16 && context_16.id;
    /**
     * If you want to execute a function LATER, but want to set its arguments NOW.
     * Use with Promise.all or something fancy like that. For when you need to
     * set function's arguments immediately, but call the function later.
     * ```
     * let doLater = call_later(console.warn, ['go for a run']);
     * ```
     * @param {function} func - function you want to call later (to curry). It can be bound
     * @param {array} args - array of arguments (this is not useful without arguments)
     */
    function call_later(func, args) {
        return function () {
            return func(...args);
        };
    }
    exports_16("default", call_later);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/curry/throttle", [], function (exports_17, context_17) {
    "use strict";
    var __moduleName = context_17 && context_17.id;
    /**
     * Returns curried function.
     * Calling curry will execute first function immediately. But subsequent calls will be dropped if not enough time has passed.
     */
    function throttle(
    /**
     * Function to throttle
     */
    func, 
    /**
     * Throttle for number of milliseconds
     */
    delay) {
        let lastCall = 0;
        return function (...args) {
            let now = new Date().getTime();
            if (now - lastCall < delay) {
                return;
            }
            lastCall = now;
            return func(...args);
        };
    }
    exports_17("default", throttle);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/curry/debounce", [], function (exports_18, context_18) {
    "use strict";
    var __moduleName = context_18 && context_18.id;
    /**
     * Returns curried function.
     * Calling curry will delay execution of funtion until delay time (ms).
     * While delay is in progress, extra function calls will be dropped, but after delay, latest attempted function will be called.
     */
    function debounce(
    /**
     * Function to delay
     */
    func, 
    /**
     * Delay in milliseconds
     */
    delay) {
        let debouncedTimeout = 0;
        let debouncedTimeoutWaiting = false;
        return (...args) => {
            // always clear old timeouts
            window.clearTimeout(debouncedTimeout);
            // standard debounce
            debouncedTimeoutWaiting = true;
            debouncedTimeout = window.setTimeout(() => {
                debouncedTimeoutWaiting = false;
                func.apply(null, args);
            }, delay);
        };
    }
    exports_18("default", debounce);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/promises/sleep", [], function (exports_19, context_19) {
    "use strict";
    var __moduleName = context_19 && context_19.id;
    /**
     * Just like in other programming languages, now possible with JavaScript. Use await keyword!
     * @param ms - milliseconds to sleep for
     */
    function sleep(ms = 0) {
        return new Promise((r) => setTimeout(r, ms));
    }
    exports_19("default", sleep);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/curry/_.test", ["io/curry/call_later", "io/curry/throttle", "io/curry/debounce", "io/promises/sleep"], function (exports_20, context_20) {
    "use strict";
    var call_later_1, throttle_1, debounce_1, sleep_1;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [
            function (call_later_1_1) {
                call_later_1 = call_later_1_1;
            },
            function (throttle_1_1) {
                throttle_1 = throttle_1_1;
            },
            function (debounce_1_1) {
                debounce_1 = debounce_1_1;
            },
            function (sleep_1_1) {
                sleep_1 = sleep_1_1;
            }
        ],
        execute: function () {
            describe("curry", () => {
                it("call_later", () => {
                    const functionToCallLater = (arg1, arg2) => {
                        return arg1 + arg2;
                    };
                    let curriedFunction = call_later_1.default(functionToCallLater, [22, 33]);
                    let functionReturnValue = curriedFunction();
                    expect(functionReturnValue).toBe(55);
                });
                it("throttle (supports multiple at the same time)", async () => {
                    let mA = [];
                    let mB = [];
                    const fA = throttle_1.default((str) => {
                        mA.push(str);
                    }, 100);
                    const fB = throttle_1.default((str) => {
                        mB.push(str);
                    }, 100);
                    fA("one");
                    fA("two");
                    fA("three");
                    fB("one");
                    fB("two");
                    fB("three");
                    await sleep_1.default(150); // wait for throttle to finish
                    expect(mA).toStrictEqual(["one"]);
                    expect(mB).toStrictEqual(["one"]);
                });
                it("debounce (supports multiple at the same time)", async () => {
                    let mA = [];
                    let mB = [];
                    const fA = debounce_1.default((str) => {
                        mA.push(str);
                    }, 100);
                    const fB = debounce_1.default((str) => {
                        mB.push(str);
                    }, 100);
                    fA("one");
                    fA("two");
                    fA("three");
                    fB("one");
                    fB("two");
                    fB("three");
                    await sleep_1.default(150); // wait for debounce to finish
                    expect(mA).toStrictEqual(["three"]);
                    expect(mB).toStrictEqual(["three"]);
                });
            });
        }
    };
});
System.register("io/curry/index", ["io/curry/call_later", "io/curry/throttle", "io/curry/debounce"], function (exports_21, context_21) {
    "use strict";
    var call_later_2, throttle_2, debounce_2, call_later, throttle, debounce;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [
            function (call_later_2_1) {
                call_later_2 = call_later_2_1;
            },
            function (throttle_2_1) {
                throttle_2 = throttle_2_1;
            },
            function (debounce_2_1) {
                debounce_2 = debounce_2_1;
            }
        ],
        execute: function () {
            exports_21("call_later", call_later = call_later_2.default);
            exports_21("throttle", throttle = throttle_2.default);
            exports_21("debounce", debounce = debounce_2.default);
        }
    };
});
System.register("io/error/try_catch", [], function (exports_22, context_22) {
    "use strict";
    var __moduleName = context_22 && context_22.id;
    /**
     * Alternative to try {} catch(e){} block. Execute it as a function.
     */
    function try_catch(tryCode, catchAction) {
        try {
            tryCode();
        }
        catch (err) {
            // cconsole is not a typo, it's the name of a global custom console logger
            // this is to save time, so you don't have to type console.error() in every handler
            // @ts-ignore
            // typeof cconsole === "object" ? cconsole.error(err) : console.error(err);
            // handle error
            if (typeof catchAction === "function")
                catchAction(err);
        }
    }
    exports_22("default", try_catch);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/json/jss", [], function (exports_23, context_23) {
    "use strict";
    var __moduleName = context_23 && context_23.id;
    function jss(val) {
        try {
            return JSON.stringify(val);
        }
        catch (e) {
            return undefined;
        }
    }
    exports_23("default", jss);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/error/parse_error_message", ["io/json/jss"], function (exports_24, context_24) {
    "use strict";
    var jss_1;
    var __moduleName = context_24 && context_24.id;
    /**
     * Parse simple message string from HTTP JSON response, GraphQL, or Error() object
     *    Too many libraries to fetch HTTP requests, too many non-standard response formats.
     *    This handles Axios or standard XMLHTTPRequest, or an Error() object
     *    Supports either convention, of Twitter or Facebook
     *    Supports "non-legacy" format described in: https://www.mediawiki.org/wiki/API:Errors_and_warnings
     *    Response and parsed error can be any type. This will figure it out, with just a few if/else rules.
     *      NOTE:
     *      Unless you don't care about performance, this should NOT be used to detect if a variable is an error,
     *      only to parse the message string from some object/response which you know contains an error message.
     * @param {object} response - response from HTTP request or Error object
     * @returns {string} - nice readable text, meant for an alert popup in your front-end user interface
     */
    function parse_error_message(response) {
        if (!response)
            return "!error";
        //
        // maybe input was a string, which is already an error message,
        // or null/undefined/false, whatever, just output that as is
        if (typeof response !== "object")
            return response.toString();
        //
        // content from HTTP response:
        let content = response.response
            ? response.response.data
                ? response.response.data
                : response.response
            : response.data || response;
        //
        // error object:
        let error = content;
        if (content.errors)
            error = content.errors[0] || content.errors;
        else if (content.warnings)
            error = content.warnings[0] || content.warnings;
        else if (content.error)
            error = content.error;
        else if (content.warning)
            error = content.warning;
        //
        // something weird:
        if (typeof error !== "object")
            return error.toString();
        //
        // JS Error object - cut off extra stuff about files/lines:
        if (error[0] && error[0].length > 3)
            return error[0];
        //
        // JSON object:
        if (error.message)
            return error.message;
        let str = jss_1.default(error);
        let strlen = str.length;
        if (strlen > 23) {
            str = str.substring(0, 23) + "...";
        }
        return "Error " + strlen + ": " + str;
    }
    exports_24("default", parse_error_message);
    return {
        setters: [
            function (jss_1_1) {
                jss_1 = jss_1_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("io/error/_.test", ["io/error/try_catch", "io/error/parse_error_message"], function (exports_25, context_25) {
    "use strict";
    var try_catch_1, parse_error_message_1;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (try_catch_1_1) {
                try_catch_1 = try_catch_1_1;
            },
            function (parse_error_message_1_1) {
                parse_error_message_1 = parse_error_message_1_1;
            }
        ],
        execute: function () {
            describe("try_catch", () => {
                it("catches the error", () => {
                    let error = "";
                    try_catch_1.default(() => {
                        throw new Error("try_catch caught this error so code execution can continue");
                    }, (err) => {
                        error = err.message.split("\n")[0];
                    });
                    expect(error).toBe("try_catch caught this error so code execution can continue");
                });
            });
            describe("parse_error_message", () => {
                it("simple text", () => {
                    let str = parse_error_message_1.default("simple text message");
                    expect(str).toBe("simple text message");
                });
                it("JS error object", () => {
                    let str = parse_error_message_1.default(new Error("JavaScript error object"));
                    expect(str).toBe("JavaScript error object");
                });
                it("network error", () => {
                    let str = parse_error_message_1.default({ data: { error: { message: "invalid command" } } });
                    expect(str).toBe("invalid command");
                });
                it("network errors", () => {
                    let str = parse_error_message_1.default({ data: { errors: ["invalid command 1", "invalid command 2"] } });
                    expect(str).toBe("invalid command 1");
                });
                it("network data text", () => {
                    let str = parse_error_message_1.default({ data: "just some text" });
                    expect(str).toBe("just some text");
                });
                it("network error text", () => {
                    let str = parse_error_message_1.default({ error: "error text" });
                    expect(str).toBe("error text");
                });
                it("network warning text", () => {
                    let str = parse_error_message_1.default({ warning: "warning text" });
                    expect(str).toBe("warning text");
                });
                it("not a real error but an unexpected data format", () => {
                    let str = parse_error_message_1.default({ this: { aint: { right: false } } });
                    expect(str).toBe('Error 33: {"this":{"aint":{"right...');
                });
            });
        }
    };
});
System.register("io/error/index", ["io/error/try_catch", "io/error/parse_error_message"], function (exports_26, context_26) {
    "use strict";
    var try_catch_2, parse_error_message_2, try_catch, parse_error_message;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [
            function (try_catch_2_1) {
                try_catch_2 = try_catch_2_1;
            },
            function (parse_error_message_2_1) {
                parse_error_message_2 = parse_error_message_2_1;
            }
        ],
        execute: function () {
            exports_26("try_catch", try_catch = try_catch_2.default);
            exports_26("parse_error_message", parse_error_message = parse_error_message_2.default);
        }
    };
});
System.register("io/html/picture_from_src", [], function (exports_27, context_27) {
    "use strict";
    var __moduleName = context_27 && context_27.id;
    /**
     * Generate <picture> html tag string from src url. Fix crop/fill dimensions for Cloudinary.com resizer.
     *    WHENEVER POSSIBLE, pass 2 out of 3 props: width, height, or heightWidthRatio.
     *    "Sm" suffix refers to "small screens". Optionally, specify alternative props for mobile devices.
     * @param options.src {string} - required, path to image (can be relative or absolute)
     * @param options.srcSm {string} - for mobile
     *
     * @param options.width {number} - required if !height, pixels
     * @param options.widthSm {number} - for mobile
     *
     * @param options.height {number} - required if !width, pixels
     * @param options.heightSm {number} - for mobile
     *
     * @param options.heightWidthRatio {number} - 0-1 (divide height by width)
     * @param options.heightWidthRatioSm {number} - for mobile
     *
     * @param options.crop {boolean} - by default, 100% of the picture height and width will be fitted inside the bounding box, with padding around the sides
     *    Pass true to fill 100% of the bounding box, and crop the image height/width, whichever dimension does not fit into the bounding box.
     */
    function picture_from_src({ src = "", srcSm = "", width, widthSm, height, heightSm, heightWidthRatio, heightWidthRatioSm, crop = false }) {
        if (!src || (!width && !height)) {
            return null;
        }
        /*
         * Interpolate height/width/ratio variables from props.
         * WHENEVER POSSIBLE, pass 2 out of 3 props: width, height, or heightWidthRatio.
         * OTHERWISE, some returned properties will be undefined. Never use picture.width without checking if truthy.
         */
        if (width) {
            width = Math.round(width);
        }
        if (height) {
            height = Math.round(height);
        }
        if (!width && height && heightWidthRatio) {
            width = Math.round(height / heightWidthRatio);
        }
        if (!height && width && heightWidthRatio) {
            height = Math.round(width * heightWidthRatio);
        }
        if (!heightWidthRatio && width && height) {
            heightWidthRatio = height / width;
        }
        /*
         * MOBILE height/width
         * This will actually be LARGER than on desktop, becuase iPhone has 3x pixel density!
         * Full-width image (400px) on a 414px wide iPhone screen will be 1200px wide!
         * That's weird, but intentional, so graphics look crisp.
         */
        if (!heightWidthRatioSm && heightWidthRatio) {
            heightWidthRatioSm = heightWidthRatio;
        }
        if (!widthSm && heightSm && heightWidthRatioSm) {
            widthSm = Math.round(heightSm / heightWidthRatioSm);
        }
        if (!heightSm && widthSm && heightWidthRatioSm) {
            heightSm = Math.round(widthSm * heightWidthRatioSm);
        }
        if (!heightSm && height) {
            heightSm = Math.round((height / 3) * 2);
        }
        if (!widthSm && width) {
            widthSm = Math.round((width / 3) * 2);
        }
        if (!heightWidthRatioSm && heightSm && widthSm) {
            heightWidthRatioSm = Math.round(heightSm / widthSm);
        }
        // 414px wide iPhone screen, maximum image display size of 400px
        // if (widthSm && widthSm > 400) {
        // widthSm = 400;
        // if (!heightSm && heightWidthRatioSm && widthSm) {
        //   heightSm = Math.round(heightWidthRatioSm * widthSm);
        // }
        // }
        /*
         * PREVIEW width/height
         * This is the tiny blurry image that may load initially while waiting for full size image to download
         */
        let widthPreview = 19;
        let heightPreview = Math.round(widthPreview * heightWidthRatio);
        /*
         * OUTPUT format
         * Calculate all variants, sizes, and formats, to be used later in <picture> tag.
         * Multiply all heights/widths by 2x pixel density, to account for retina displays.
         */
        let picture = {
            src: src || "",
            src_sm: srcSm || src || "",
            src_preview: "",
            src_preview_sm: "",
            src_webp: "",
            src_webp_sm: "",
            type: "",
            type_sm: "",
            width,
            height,
            width_sm: widthSm || width,
            height_sm: widthSm ? heightSm : height
        };
        // c_mode
        let c_mode = !!crop ? "c_fill,g_auto" : "c_pad";
        // make <picture><source> attributes from src
        if (src.includes("cloudinary.com")) {
            src = src.replace(/\.svg$/, ".png");
            if (srcSm)
                srcSm = srcSm.replace(/\.svg$/, ".png");
            src = src.replace("http://", "https://");
            // remove version
            src = src.replace(/v[0-9]{9,}/, "");
            // remove width/height/crop, because we'll add our own crop
            src = src.replace(/\/[a-z]_[^/]+/, "");
            // regex
            let srcReplace = "/images/";
            if (src.includes("/image/upload/")) {
                srcReplace = "/image/upload/";
            }
            const srcRe = new RegExp(`${srcReplace}`); // the .*?/ bit is to remove preexisting url transformations
            // resize to specified size
            // multiplying height and width * 2x pixel density, to account for retina displays
            // multiplying heightSm and widthSm * 3x, because new iPhones have 3x pixel density
            if (!height) {
                let widthSmX = widthSm < 500 ? Math.floor(widthSm * 3) : Math.floor(widthSm * 2);
                picture.src = src.replace(srcRe, `${srcReplace}w_${Math.floor(width * 2)}/`);
                picture.src_sm = (srcSm || src).replace(srcRe, `${srcReplace}w_${widthSmX}/`);
                picture.src_preview = src.replace(srcRe, `${srcReplace}w_${widthPreview},${c_mode}/`);
            }
            else if (!width) {
                let heightSmX = widthSm < 500 ? Math.floor(heightSm * 3) : Math.floor(heightSm * 2);
                picture.src = src.replace(srcRe, `${srcReplace}${"h_" + Math.floor(height * 2)}/`);
                picture.src_sm = (srcSm || src).replace(srcRe, `${srcReplace}h_${heightSmX}/`);
                picture.src_preview = src.replace(srcRe, `${srcReplace}h_${heightPreview}/`);
            }
            else {
                let widthSmX = widthSm < 500 ? Math.floor(widthSm * 3) : Math.floor(widthSm * 2);
                let heightSmX = widthSm < 500 ? Math.floor(heightSm * 3) : Math.floor(heightSm * 2);
                // if both width and height props available, combine
                picture.src = src.replace(srcRe, `${srcReplace}w_${Math.floor(width * 2)},h_${Math.floor(height * 2)},${c_mode}/` // comment to keep in separate line
                );
                picture.src_sm = (srcSm || src).replace(srcRe, `${srcReplace}w_${widthSmX},h_${heightSmX},${c_mode}/`);
                picture.src_preview = src.replace(srcRe, `${srcReplace}w_${widthPreview},h_${heightPreview},${c_mode}/`);
                picture.src_preview_sm = (srcSm || src).replace(srcRe, `${srcReplace}w_${widthPreview},h_${heightPreview},${c_mode}/`);
            }
            // webp
            {
                let { rext, type } = srcMeta(picture.src);
                picture.type = type;
                picture.type_sm = type;
                if (rext) {
                    picture.src_webp = picture.src.replace(rext, ".webp");
                    picture.src_webp_sm = picture.src_sm.replace(rext, ".webp");
                }
            }
        }
        return picture;
    }
    exports_27("default", picture_from_src);
    function srcMeta(src) {
        let meta = {};
        if (src.includes(".jpeg")) {
            meta.ext = ".jpeg";
            meta.type = "image/jpeg";
        }
        else if (src.includes(".jpg")) {
            meta.ext = ".jpg";
            meta.type = "image/jpeg";
        }
        else if (src.includes(".png")) {
            meta.ext = ".png";
            meta.type = "image/png";
        }
        else if (src.includes(".gif")) {
            meta.ext = ".gif";
            meta.type = "image/gif";
        }
        else if (src.includes(".webp")) {
            meta.ext = ".webp";
            meta.type = "image/webp";
        }
        else if (src.includes(".tiff")) {
            meta.ext = ".tiff";
            meta.type = "image/tiff";
        }
        else if (src.includes(".ico")) {
            meta.ext = ".ico";
            meta.type = "image/ico";
        }
        else if (src.includes(".svg")) {
            meta.ext = ".svg";
            meta.type = "image/svg";
        }
        if (meta.ext) {
            meta.rext = new RegExp(meta.ext, "i"); // must be case-insensitive search!
        }
        return meta;
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/html/index", ["io/html/picture_from_src"], function (exports_28, context_28) {
    "use strict";
    var picture_from_src_1, picture_from_src;
    var __moduleName = context_28 && context_28.id;
    return {
        setters: [
            function (picture_from_src_1_1) {
                picture_from_src_1 = picture_from_src_1_1;
            }
        ],
        execute: function () {
            exports_28("picture_from_src", picture_from_src = picture_from_src_1.default);
        }
    };
});
System.register("io/html/picture_from_src.test", ["io/html/picture_from_src"], function (exports_29, context_29) {
    "use strict";
    var picture_from_src_2;
    var __moduleName = context_29 && context_29.id;
    return {
        setters: [
            function (picture_from_src_2_1) {
                picture_from_src_2 = picture_from_src_2_1;
            }
        ],
        execute: function () {
            describe("picture_from_src", () => {
                it("generic - width and height", () => {
                    expect(picture_from_src_2.default({ src: "https://www.paulshorey.com/images/screenshot1.png", width: 1440, height: 800 })).toStrictEqual({
                        height: 800,
                        height_sm: 533,
                        src: "https://www.paulshorey.com/images/screenshot1.png",
                        src_preview: "",
                        src_preview_sm: "",
                        src_sm: "https://www.paulshorey.com/images/screenshot1.png",
                        src_webp: "",
                        src_webp_sm: "",
                        type: "",
                        type_sm: "",
                        width: 1440,
                        width_sm: 960
                    });
                });
                it("Cloudinary - width and height (801 mobile resize == 267 render size * 3 pixel density)", () => {
                    expect(picture_from_src_2.default({
                        src: "https://res.cloudinary.com/spiral/image/upload/path/to/image.png",
                        width: 400,
                        height: 400
                    })).toStrictEqual({
                        height: 400,
                        height_sm: 267,
                        src: "https://res.cloudinary.com/spiral/image/upload/w_800,h_800,c_pad/path/to/image.png",
                        src_preview: "https://res.cloudinary.com/spiral/image/upload/w_19,h_19,c_pad/path/to/image.png",
                        src_preview_sm: "https://res.cloudinary.com/spiral/image/upload/w_19,h_19,c_pad/path/to/image.png",
                        src_sm: "https://res.cloudinary.com/spiral/image/upload/w_801,h_801,c_pad/path/to/image.png",
                        src_webp: "https://res.cloudinary.com/spiral/image/upload/w_800,h_800,c_pad/path/to/image.webp",
                        src_webp_sm: "https://res.cloudinary.com/spiral/image/upload/w_801,h_801,c_pad/path/to/image.webp",
                        type: "image/png",
                        type_sm: "image/png",
                        width: 400,
                        width_sm: 267
                    });
                });
                it("Cloudinary - width and heightRatio + mobile smaller", () => {
                    expect(picture_from_src_2.default({
                        src: "https://res.cloudinary.com/spiral/image/upload/path/to/image.png",
                        srcSm: "https://res.cloudinary.com/spiral/image/upload/path/to/image-small.png",
                        width: 400,
                        widthSm: 250,
                        heightWidthRatio: 1.25,
                        heightWidthRatioSm: 1
                    })).toStrictEqual({
                        height: 500,
                        height_sm: 250,
                        src: "https://res.cloudinary.com/spiral/image/upload/w_800,h_1000,c_pad/path/to/image.png",
                        src_preview: "https://res.cloudinary.com/spiral/image/upload/w_19,h_24,c_pad/path/to/image.png",
                        src_preview_sm: "https://res.cloudinary.com/spiral/image/upload/w_19,h_24,c_pad/path/to/image-small.png",
                        src_sm: "https://res.cloudinary.com/spiral/image/upload/w_750,h_750,c_pad/path/to/image-small.png",
                        src_webp: "https://res.cloudinary.com/spiral/image/upload/w_800,h_1000,c_pad/path/to/image.webp",
                        src_webp_sm: "https://res.cloudinary.com/spiral/image/upload/w_750,h_750,c_pad/path/to/image-small.webp",
                        type: "image/png",
                        type_sm: "image/png",
                        width: 400,
                        width_sm: 250
                    });
                });
                it("Cloudinary - width only + mobile larger", () => {
                    expect(picture_from_src_2.default({
                        src: "https://res.cloudinary.com/spiral/image/upload/path/to/image.png",
                        srcSm: "https://res.cloudinary.com/spiral/image/upload/path/to/image-small.png",
                        width: 1200,
                        widthSm: 500
                    })).toStrictEqual({
                        height: undefined,
                        height_sm: undefined,
                        src: "https://res.cloudinary.com/spiral/image/upload/w_2400/path/to/image.png",
                        src_preview: "https://res.cloudinary.com/spiral/image/upload/w_19,c_pad/path/to/image.png",
                        src_preview_sm: "",
                        src_sm: "https://res.cloudinary.com/spiral/image/upload/w_1000/path/to/image-small.png",
                        src_webp: "https://res.cloudinary.com/spiral/image/upload/w_2400/path/to/image.webp",
                        src_webp_sm: "https://res.cloudinary.com/spiral/image/upload/w_1000/path/to/image-small.webp",
                        type: "image/png",
                        type_sm: "image/png",
                        width: 1200,
                        width_sm: 500
                    });
                });
                it("Cloudinary - height only + mobile larger", () => {
                    expect(picture_from_src_2.default({
                        src: "https://res.cloudinary.com/spiral/image/upload/path/to/image.png",
                        srcSm: "https://res.cloudinary.com/spiral/image/upload/path/to/image-small.png",
                        height: 1200,
                        heightSm: 500
                    })).toStrictEqual({
                        height: 1200,
                        height_sm: 1200,
                        src: "https://res.cloudinary.com/spiral/image/upload/h_2400/path/to/image.png",
                        src_preview: "https://res.cloudinary.com/spiral/image/upload/h_NaN/path/to/image.png",
                        src_preview_sm: "",
                        src_sm: "https://res.cloudinary.com/spiral/image/upload/h_1000/path/to/image-small.png",
                        src_webp: "https://res.cloudinary.com/spiral/image/upload/h_2400/path/to/image.webp",
                        src_webp_sm: "https://res.cloudinary.com/spiral/image/upload/h_1000/path/to/image-small.webp",
                        type: "image/png",
                        type_sm: "image/png",
                        width: undefined,
                        width_sm: undefined
                    });
                });
            });
        }
    };
});
System.register("io/json/jsp", [], function (exports_30, context_30) {
    "use strict";
    var __moduleName = context_30 && context_30.id;
    function jsp(val) {
        try {
            return JSON.parse(val);
        }
        catch (e) {
            return undefined;
        }
    }
    exports_30("default", jsp);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/json/json_parse", [], function (exports_31, context_31) {
    "use strict";
    var __moduleName = context_31 && context_31.id;
    /**
     * Parse JSON variable - recursively
     * @param {*} value - Any variable type
     * @returns {*} value - Intelligently parsed. Note: Will convert stringified number to type number!
     * NOTE: JSON can not stringify ES6 types Set and Map. Stringify/parse, changes value to empty object.
     * As a workaround, before stringifying, convert Set to Array, and Map to Array of tuples.
     */
    function json_parse(value) {
        if (typeof value === "string") {
            value = value.trim();
        }
        let variable;
        // Simple parse variable
        if (typeof value === "string" && (value[0] === "[" || value[0] === "{" || value[0] === '"')) {
            try {
                variable = JSON.parse(value); // JSON stringified array or object
            }
            catch (e) {
                try {
                    variable = JSON.parse(value.replace(/[\r\n]+/g, "").replace(/[\t]+/g, " ")); // edge case
                }
                catch (e) {
                    variable = value.includes("[") ? [] : {}; // broken JSON array or object
                }
            }
        }
        else if (value === "true") {
            variable = true;
        }
        else if (value === "false") {
            variable = false;
        }
        else if (value === "null") {
            variable = null; // same logic as in JSON.parse()
        }
        else if (value === "undefined") {
            variable = undefined; // same logic as in JSON.parse()
        }
        else {
            // simple value (JSON.parse converts numbers in quotes to type number)
            try {
                variable = JSON.parse(value); // number
            }
            catch (e) {
                variable = value; // string or undefined
            }
        }
        // Parse recursively - if Object/Array
        if (typeof variable === "object") {
            // iterate all props/values
            for (let key in variable) {
                if (!variable.hasOwnProperty(key))
                    continue;
                // parse each prop/value
                variable[key] = json_parse(variable[key]);
            }
        }
        return variable;
    }
    exports_31("default", json_parse);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/obj/is_obj", [], function (exports_32, context_32) {
    "use strict";
    var __moduleName = context_32 && context_32.id;
    /**
     * Checks if variable is a real object.
     * @returns {boolean} - true if a real object
     */
    function is_obj(variable) {
        if (typeof variable === "object" && variable !== null && !Array.isArray(variable)) {
            return true;
        }
        return false;
    }
    exports_32("default", is_obj);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/obj/obj_not_empty", ["io/obj/is_obj"], function (exports_33, context_33) {
    "use strict";
    var is_obj_1;
    var __moduleName = context_33 && context_33.id;
    /**
     * Check if variable is valid object, and has keys. Returns false if not object, or has no keys.
     */
    function obj_not_empty(obj) {
        if (!is_obj_1.default(obj)) {
            return false;
        }
        for (let key in obj) {
            // found a property. No need to keep looping.
            return true;
        }
        return false;
    }
    exports_33("default", obj_not_empty);
    return {
        setters: [
            function (is_obj_1_1) {
                is_obj_1 = is_obj_1_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("io/obj/obj_keys_from_array", [], function (exports_34, context_34) {
    "use strict";
    var __moduleName = context_34 && context_34.id;
    /**
     * Create an object from array. Object's keys will made from Array's values.
     *    Use this to filter an array, keep only unique values, and maybe make something of them.
     *    This might be faster than using ES6 `[...new Set(...arr)]`, because it loops only once.
     * @param {array} arr - array values will be used, keys ignored
     * @param {*} value - any value to assign to each new item in object. Default value = true.
     * @returns {object} - from array values. Duplicate array values have been removed.
     */
    function obj_keys_from_array(arr, value = true) {
        let obj = {};
        for (let key of arr) {
            obj[key] = value;
        }
        return obj;
    }
    exports_34("default", obj_keys_from_array);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/obj/obj_first_value", [], function (exports_35, context_35) {
    "use strict";
    var __moduleName = context_35 && context_35.id;
    /**
     * Returns the first value in an object, just like we sometimes do with an array.
     * @returns {any} - value
     */
    function obj_first_value(obj) {
        for (let key in obj) {
            // doesn't loop, but that's the point!
            return obj[key];
        }
    }
    exports_35("default", obj_first_value);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/obj/obj_first_entry", [], function (exports_36, context_36) {
    "use strict";
    var __moduleName = context_36 && context_36.id;
    /**
     * Return the first entry of an object, just like we sometimes do with an array.
     * @returns {Array} - [key, value]
     */
    function obj_first_entry(obj) {
        for (let key in obj) {
            // doesn't loop, but that's the point!
            return [key, obj[key]];
        }
    }
    exports_36("default", obj_first_entry);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/obj/obj_has_key", ["io/obj/is_obj"], function (exports_37, context_37) {
    "use strict";
    var is_obj_2;
    var __moduleName = context_37 && context_37.id;
    /**
     * False if not an object, or key is not a property of the object.
     */
    function obj_has_key(obj, key) {
        return is_obj_2.default(obj) && obj.hasOwnProperty(key);
    }
    exports_37("default", obj_has_key);
    return {
        setters: [
            function (is_obj_2_1) {
                is_obj_2 = is_obj_2_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("io/obj/index", ["io/obj/is_obj", "io/obj/obj_not_empty", "io/obj/obj_keys_from_array", "io/obj/obj_first_value", "io/obj/obj_first_entry", "io/obj/obj_has_key"], function (exports_38, context_38) {
    "use strict";
    var is_obj_3, obj_not_empty_1, obj_keys_from_array_1, obj_first_value_1, obj_first_entry_1, obj_has_key_1, is_obj, obj_not_empty, obj_keys_from_array, obj_first_value, obj_first_entry, obj_has_key;
    var __moduleName = context_38 && context_38.id;
    return {
        setters: [
            function (is_obj_3_1) {
                is_obj_3 = is_obj_3_1;
            },
            function (obj_not_empty_1_1) {
                obj_not_empty_1 = obj_not_empty_1_1;
            },
            function (obj_keys_from_array_1_1) {
                obj_keys_from_array_1 = obj_keys_from_array_1_1;
            },
            function (obj_first_value_1_1) {
                obj_first_value_1 = obj_first_value_1_1;
            },
            function (obj_first_entry_1_1) {
                obj_first_entry_1 = obj_first_entry_1_1;
            },
            function (obj_has_key_1_1) {
                obj_has_key_1 = obj_has_key_1_1;
            }
        ],
        execute: function () {
            exports_38("is_obj", is_obj = is_obj_3.default);
            exports_38("obj_not_empty", obj_not_empty = obj_not_empty_1.default);
            exports_38("obj_keys_from_array", obj_keys_from_array = obj_keys_from_array_1.default);
            exports_38("obj_first_value", obj_first_value = obj_first_value_1.default);
            exports_38("obj_first_entry", obj_first_entry = obj_first_entry_1.default);
            exports_38("obj_has_key", obj_has_key = obj_has_key_1.default);
        }
    };
});
System.register("io/json/_.test", ["io/json/jsp", "io/json/json_parse", "io/obj/index"], function (exports_39, context_39) {
    "use strict";
    var jsp_1, json_parse_1, obj_1;
    var __moduleName = context_39 && context_39.id;
    return {
        setters: [
            function (jsp_1_1) {
                jsp_1 = jsp_1_1;
            },
            function (json_parse_1_1) {
                json_parse_1 = json_parse_1_1;
            },
            function (obj_1_1) {
                obj_1 = obj_1_1;
            }
        ],
        execute: function () {
            describe("json", () => {
                it("jsp", () => {
                    let jspObject = json_parse_1.default('{"one":1}');
                    let jspEmptyObject = jsp_1.default("{}");
                    expect(jspObject?.one).toBe(1);
                    expect(obj_1.is_obj(jspEmptyObject) && !obj_1.obj_not_empty(jspEmptyObject)).toBe(true);
                    expect(jsp_1.default("null")).toBe(null);
                    expect(jsp_1.default("2")).toBe(2);
                    expect(jsp_1.default("false")).toBe(false);
                    expect(jsp_1.default("true")).toBe(true);
                    expect(jsp_1.default("undefined")).toBe(undefined);
                    expect(jsp_1.default("JSON")).toBe(undefined); // STRANGE functionality - fails to parse value "JSON"
                });
                it("json_parse", () => {
                    let json_parseObject = json_parse_1.default('{"one":1}');
                    let json_parseEmptyObject = json_parse_1.default("{}");
                    expect(json_parseObject?.one).toBe(1);
                    expect(obj_1.is_obj(json_parseEmptyObject) && !obj_1.obj_not_empty(json_parseEmptyObject)).toBe(true);
                    expect(json_parse_1.default("null")).toBe(null);
                    expect(json_parse_1.default("2")).toBe(2);
                    expect(json_parse_1.default("false")).toBe(false);
                    expect(json_parse_1.default("true")).toBe(true);
                    expect(json_parse_1.default("undefined")).toBe(undefined);
                    expect(json_parse_1.default("JSON")).toBe("JSON");
                });
            });
        }
    };
});
System.register("io/json/index", ["io/json/jss", "io/json/jsp", "io/json/json_parse"], function (exports_40, context_40) {
    "use strict";
    var jss_2, jsp_2, json_parse_2, jss, jsp, json_parse;
    var __moduleName = context_40 && context_40.id;
    return {
        setters: [
            function (jss_2_1) {
                jss_2 = jss_2_1;
            },
            function (jsp_2_1) {
                jsp_2 = jsp_2_1;
            },
            function (json_parse_2_1) {
                json_parse_2 = json_parse_2_1;
            }
        ],
        execute: function () {
            exports_40("jss", jss = jss_2.default);
            exports_40("jsp", jsp = jsp_2.default);
            exports_40("json_parse", json_parse = json_parse_2.default);
        }
    };
});
System.register("io/num/average", [], function (exports_41, context_41) {
    "use strict";
    var __moduleName = context_41 && context_41.id;
    function average(values) {
        let sum = values.reduce((previous, current) => (current += previous));
        return sum / values.length;
    }
    exports_41("default", average);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/num/mean", [], function (exports_42, context_42) {
    "use strict";
    var __moduleName = context_42 && context_42.id;
    function mean(values) {
        values.sort((a, b) => a - b);
        let lowMiddle = Math.floor((values.length - 1) / 2);
        let highMiddle = Math.ceil((values.length - 1) / 2);
        return (values[lowMiddle] + values[highMiddle]) / 2;
    }
    exports_42("default", mean);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/num/is_number", [], function (exports_43, context_43) {
    "use strict";
    var __moduleName = context_43 && context_43.id;
    function is_number(variable) {
        if (variable === null) {
            return false;
        }
        if (typeof variable === "string") {
            variable = Number(variable);
        }
        if (isNaN(variable)) {
            return false;
        }
        return true;
    }
    exports_43("default", is_number);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/num/round", [], function (exports_44, context_44) {
    "use strict";
    var __moduleName = context_44 && context_44.id;
    /**
     * Round to the nearest integer, by increment: 1, 10, 100, 1000, etc.
     * @param increment - Default is 1. You can pass 10, 100, 1000, etc.
     */
    function round(num, increment = 1) {
        return Math.round(num / increment) * increment;
    }
    exports_44("default", round);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/num/index", ["io/num/average", "io/num/mean", "io/num/is_number", "io/num/round"], function (exports_45, context_45) {
    "use strict";
    var average_1, mean_1, is_number_1, round_1, average, mean, is_number, round;
    var __moduleName = context_45 && context_45.id;
    return {
        setters: [
            function (average_1_1) {
                average_1 = average_1_1;
            },
            function (mean_1_1) {
                mean_1 = mean_1_1;
            },
            function (is_number_1_1) {
                is_number_1 = is_number_1_1;
            },
            function (round_1_1) {
                round_1 = round_1_1;
            }
        ],
        execute: function () {
            exports_45("average", average = average_1.default);
            exports_45("mean", mean = mean_1.default);
            exports_45("is_number", is_number = is_number_1.default);
            exports_45("round", round = round_1.default);
        }
    };
});
System.register("io/num/_.test", ["io/num/index"], function (exports_46, context_46) {
    "use strict";
    var _2;
    var __moduleName = context_46 && context_46.id;
    return {
        setters: [
            function (_2_1) {
                _2 = _2_1;
            }
        ],
        execute: function () {
            describe("num", () => {
                it("average", () => {
                    expect(_2.average([1, 2, 3, 3, 2, 1])).toBe(2);
                });
                it("mean", () => {
                    expect(_2.mean([1, 2, 2, 2, 2, 100000])).toBe(2);
                });
                it("is_number", () => {
                    expect(_2.is_number("1")).toBe(true);
                    expect(_2.is_number("1.12345")).toBe(true);
                    expect(_2.is_number("1%12345")).toBe(false);
                });
            });
        }
    };
});
System.register("io/obj/_.test", ["io/obj/index"], function (exports_47, context_47) {
    "use strict";
    var _3;
    var __moduleName = context_47 && context_47.id;
    return {
        setters: [
            function (_3_1) {
                _3 = _3_1;
            }
        ],
        execute: function () {
            describe("obj", () => {
                it("obj_keys_from_array", () => {
                    const arr = [1, 2, 3];
                    const obj = _3.obj_keys_from_array(arr);
                    expect(obj).toEqual({
                        1: true,
                        2: true,
                        3: true
                    });
                });
                it("obj_has_key", () => {
                    expect(_3.obj_has_key(null, "")).toBe(false);
                    expect(_3.obj_has_key({}, "")).toBe(false);
                    expect(_3.obj_has_key({ one: 1 }, "two")).toBe(false);
                    expect(_3.obj_has_key({ one: 1, two: 2 }, "two")).toBe(true);
                });
                it("obj_not_empty", () => {
                    expect(_3.obj_not_empty(null)).toBe(false);
                    expect(_3.obj_not_empty({})).toBe(false);
                    expect(_3.obj_not_empty({ asdf: "asdf" })).toBe(true);
                });
                it("obj_first_value", () => {
                    const firstValue = _3.obj_first_value({ key1: "val1", key2: "val2" });
                    expect(firstValue).toBe("val1");
                });
                it("obj_first_entry", () => {
                    const firstItem = _3.obj_first_entry({ key1: "val1", key2: "val2" });
                    expect(firstItem[0]).toBe("key1");
                    expect(firstItem[1]).toBe("val1");
                });
                it("is_obj", () => {
                    expect(_3.is_obj(null)).toBe(false);
                    expect(_3.is_obj({})).toBe(true);
                });
            });
        }
    };
});
System.register("io/objects/objects_are_equal", [], function (exports_48, context_48) {
    "use strict";
    var __moduleName = context_48 && context_48.id;
    /**
     * Check objects deeply equal - have same content?
     * NOTE: If property is a function, then it is checked by reference.
     * @returns {boolean} - true if equal
     */
    function objects_are_equal(object1, object2) {
        const objKeys1 = object1 && Object.keys(object1);
        const objKeys2 = object2 && Object.keys(object2);
        if (objKeys1?.length !== objKeys2?.length)
            return false;
        for (var key of objKeys1) {
            const value1 = object1[key];
            const value2 = object2[key];
            const isObjects = value1 != null && typeof value1 === "object" && value2 != null && typeof value2 === "object";
            if ((isObjects && !objects_are_equal(value1, value2)) || (!isObjects && value1 !== value2)) {
                return false;
            }
        }
        return true;
    }
    exports_48("default", objects_are_equal);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/objects/objects_add_values", [], function (exports_49, context_49) {
    "use strict";
    var __moduleName = context_49 && context_49.id;
    /**
     * ADDS VALUES INSTEAD OF SIMPLY REPLACING.
     * If strings, adds. If arrays, pushes second one to first. If numbers, replaces with 2nd.
     * If booleans, prefers true.
     * If objects, merges deeply, doing the same to all its properties.
     * This is called objects_add_values not simply add_values, because this is only useful for adding object types.
     */
    function objects_add_values(val1, val2, stringDelimeter = "") {
        // The order of each if statement is important.
        if (!val1 && !val1)
            return null; // What is the ideal way to handle this?
        if (!val1 && val2)
            return val2;
        if (val1 && !val2)
            return val1;
        if (typeof val1 === "string" || typeof val2 === "string") {
            return val1 + stringDelimeter + val2;
        }
        if (typeof val1 !== typeof val2) {
            return val2 || val1;
        }
        if (typeof val1 === "number") {
            return val1 + val2;
        }
        if (typeof val1 === "boolean") {
            return val2 || val1;
        }
        if (Array.isArray(val1)) {
            return val1.concat(val2);
        }
        if (typeof val1 === "object") {
            let obj = {};
            let keys = [...new Set([...Object.keys(val1), ...Object.keys(val2)])];
            for (let key of keys) {
                obj[key] = objects_add_values(val1[key], val2[key]);
            }
            return obj;
        }
        if (typeof val1 === "function") {
            return val2;
        }
    }
    exports_49("default", objects_add_values);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/objects/objects_merge_keys", [], function (exports_50, context_50) {
    "use strict";
    var __moduleName = context_50 && context_50.id;
    /**
     * Merge key/values of two objects into one - recursively
     * @param {object} obj1 - First object, the default one
     * @param {object} obj2 - Second object, will overwrite first!
     * @returns {object} obj - Combined object with both key/values
     */
    function objects_merge(obj1, obj2) {
        // console.log('obj1', JSON.parse(JSON.stringify(obj1)));
        // console.log('obj2', JSON.parse(JSON.stringify(obj2)));
        let obj = {};
        // get keys from both objects
        let keys = [...new Set([...Object.keys(obj1), ...Object.keys(obj2)])];
        for (let key of keys) {
            // both assigned ? then merge
            if (obj1.hasOwnProperty(key) && obj2.hasOwnProperty(key)) {
                let obj1v = obj1[key];
                let obj2v = obj2[key];
                // if both objects have same key, then merge
                if (typeof obj1v !== typeof obj2v) {
                    // oh no! same key, but value is different type!
                    obj[key] = obj2v || obj1v;
                    // console.warn('objects_merge(obj1, obj2) could not merge types: key/value type of each must be same: ', typeof obj1v, typeof obj2v);
                }
                else {
                    // same type of value - lets try to combine...
                    switch (typeof obj1v) {
                        case "object":
                            // type = object
                            if (!!obj2v && !!obj1v) {
                                // both are truthy...
                                if (Array.isArray(obj2v) && Array.isArray(obj1v)) {
                                    // both arrays...
                                    obj[key] = [...new Set([...obj1[key], ...obj2[key]])];
                                }
                                else if (!Array.isArray(obj2v) && !Array.isArray(obj1v)) {
                                    // both dictionaries...
                                    obj[key] = objects_merge(obj1[key], obj2[key]);
                                }
                                else {
                                    // one is dictionary, other is array.
                                    // cannot combine unlike types. Use first...
                                    obj[key] = obj1[key];
                                }
                            }
                            else {
                                // at least one is null...
                                obj[key] = obj2v || obj1v;
                            }
                            break;
                        default:
                            // type = undefined, function, boolean, string, number
                            obj[key] = obj2v || obj1v;
                            break;
                    }
                }
            }
            else if (obj2.hasOwnProperty(key)) {
                // otherwise, use whichever one has a value
                obj[key] = obj2[key];
            }
            else {
                // otherwise, use whichever one has a value
                obj[key] = obj1[key];
            }
        }
        // console.log('obj', obj);
        return obj;
    }
    exports_50("default", objects_merge);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/objects/_.test", ["io/objects/objects_are_equal", "io/objects/objects_add_values", "io/objects/objects_merge_keys"], function (exports_51, context_51) {
    "use strict";
    var objects_are_equal_1, objects_add_values_1, objects_merge_keys_1;
    var __moduleName = context_51 && context_51.id;
    return {
        setters: [
            function (objects_are_equal_1_1) {
                objects_are_equal_1 = objects_are_equal_1_1;
            },
            function (objects_add_values_1_1) {
                objects_add_values_1 = objects_add_values_1_1;
            },
            function (objects_merge_keys_1_1) {
                objects_merge_keys_1 = objects_merge_keys_1_1;
            }
        ],
        execute: function () {
            describe("objects", () => {
                it("objects_add_values", () => {
                    expect(objects_add_values_1.default(null, undefined)).toStrictEqual(null); // what should be the ideal result?
                    expect(objects_add_values_1.default({ a: 1 }, { z: 2 })).toStrictEqual({ a: 1, z: 2 });
                    expect(objects_add_values_1.default({ a: "123" }, { z: "456" })).toStrictEqual({ a: "123456" });
                    expect(objects_add_values_1.default({ a: 123 }, { z: "456" })).toStrictEqual({ a: "123456" });
                    // adding CSS strings is why this function was originally created. 3rd argument is only for adding strings.
                    expect(objects_add_values_1.default({ a: "display:block" }, { a: "padding:1rem" }, ";")).toStrictEqual({
                        a: "display:block;padding:1rem"
                    });
                    expect(objects_add_values_1.default({ a: 1 }, { a: true })).toStrictEqual({ a: true });
                    expect(objects_add_values_1.default({ a: 1, z: true }, { a: 2, z: false })).toStrictEqual({ a: 3, z: true });
                    expect(objects_add_values_1.default([1, 2, 3], [4, 5, 6])).toStrictEqual([1, 2, 3, 4, 5, 6]);
                    expect(objects_add_values_1.default({ a: () => 1 }, { a: () => 2 }).a()).toStrictEqual(2);
                });
                it("objects_are_equal", () => {
                    const objct = { two: 2 };
                    const funct = () => 25;
                    const person1 = {
                        str: ":)",
                        obj: { a: 1 },
                        objRef: objct,
                        funct
                    };
                    const person2 = {
                        str: ":)",
                        obj: { a: 1 },
                        objRef: objct,
                        funct
                    };
                    expect(objects_are_equal_1.default(person1, person2)).toBe(true);
                    // @ts-ignore
                    person1.extra = "extra";
                    expect(objects_are_equal_1.default(person1, person2)).toBe(false);
                    // @ts-ignore
                    person2.extra = () => { };
                    expect(objects_are_equal_1.default(person1, person2)).toBe(false);
                    // @ts-ignore
                    person2.extra = "extra";
                    expect(objects_are_equal_1.default(person1, person2)).toBe(true);
                });
                it("objects_merge_keys", () => {
                    const obj1 = { one: 1 };
                    const obj2 = { two: 2 };
                    const obj = objects_merge_keys_1.default(obj1, obj2);
                    expect(obj.one).toEqual(1);
                    expect(obj.two).toEqual(2);
                });
            });
        }
    };
});
System.register("io/objects/index", ["io/objects/objects_are_equal", "io/objects/objects_add_values", "io/objects/objects_merge_keys"], function (exports_52, context_52) {
    "use strict";
    var objects_are_equal_2, objects_add_values_2, objects_merge_keys_2, objects_are_equal, objects_add_values, objects_merge_keys;
    var __moduleName = context_52 && context_52.id;
    return {
        setters: [
            function (objects_are_equal_2_1) {
                objects_are_equal_2 = objects_are_equal_2_1;
            },
            function (objects_add_values_2_1) {
                objects_add_values_2 = objects_add_values_2_1;
            },
            function (objects_merge_keys_2_1) {
                objects_merge_keys_2 = objects_merge_keys_2_1;
            }
        ],
        execute: function () {
            exports_52("objects_are_equal", objects_are_equal = objects_are_equal_2.default);
            exports_52("objects_add_values", objects_add_values = objects_add_values_2.default);
            exports_52("objects_merge_keys", objects_merge_keys = objects_merge_keys_2.default);
        }
    };
});
System.register("io/objects/objects_add_values_deep", [], function (exports_53, context_53) {
    "use strict";
    var __moduleName = context_53 && context_53.id;
    /**
     * ADDS VALUES INSTEAD OF SIMPLY REPLACING.
     * WARNING: This is experimental. Watch out for circular references!
     * Should work fine for simple objects. But with React, watch out for props.children.
     * If strings, adds. If arrays, pushes second one to first. If numbers, replaces with 2nd.
     * If booleans, prefers true.
     * If objects, merges deeply, doing the same to all its properties.
     */
    function objects_add_values_deep(val1, val2, stringDelimeter = "") {
        // The order of each if statement is important.
        if (!val1 && !val1)
            return null; // What is the ideal way to handle this?
        if (!val1 && val2)
            return val2;
        if (val1 && !val2)
            return val1;
        if (typeof val1 === "string" || typeof val2 === "string") {
            return val1 + stringDelimeter + val2;
        }
        if (typeof val1 !== typeof val2) {
            return val2 || val1;
        }
        if (typeof val1 === "number") {
            return val1 + val2;
        }
        if (typeof val1 === "boolean") {
            return val2 || val1;
        }
        if (Array.isArray(val1)) {
            return val1.concat(val2);
        }
        if (typeof val1 === "object") {
            let obj = {};
            let keys = [...new Set([...Object.keys(val1), ...Object.keys(val2)])];
            for (let key of keys) {
                obj[key] = objects_add_values_deep(val1[key], val2[key]);
            }
            return obj;
        }
        if (typeof val1 === "function") {
            return val2;
        }
    }
    exports_53("default", objects_add_values_deep);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/promises/arr_each_promise_all", [], function (exports_54, context_54) {
    "use strict";
    var __moduleName = context_54 && context_54.id;
    /**
     * Calls a function on each item in array (like [].forEach but works with Promises)
     *    Returns a Promise which resolves when all your promises are done processing.
     *    NOTE: unlike Promise.all, this does not crash on rejected Promises
     *    NOTE: your responses may not come back in the same order as they were sent
     * @param array - array with any type of values
     * @param fn - a function which returns a Promise
     *    each value from array will be fed into the fn, all executed concurrently
     */
    function arr_each_promise_all(array, fn) {
        return Promise.all(array.map(function (item) {
            return fn(item);
        }));
    }
    exports_54("default", arr_each_promise_all);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/promises/_.test", ["io/promises/arr_each_promise_all", "io/promises/sleep", "io/num/round"], function (exports_55, context_55) {
    "use strict";
    var arr_each_promise_all_1, sleep_2, round_2;
    var __moduleName = context_55 && context_55.id;
    return {
        setters: [
            function (arr_each_promise_all_1_1) {
                arr_each_promise_all_1 = arr_each_promise_all_1_1;
            },
            function (sleep_2_1) {
                sleep_2 = sleep_2_1;
            },
            function (round_2_1) {
                round_2 = round_2_1;
            }
        ],
        execute: function () {
            describe("promises", () => {
                it("sleep", async () => {
                    const start = Date.now();
                    await sleep_2.default(100);
                    const end = Date.now();
                    const roundedTime = round_2.default(end - start, 10);
                    expect(roundedTime).toBe(100); // sleep() should have stopped for approximately 100ms
                });
                it("arr_each_promise_all", async () => {
                    let total = 0;
                    let promiseFunction = async (add) => {
                        total += add || 1;
                    };
                    await arr_each_promise_all_1.default([1, 2, 3, 4, 5], promiseFunction);
                    expect(total).toBe(15);
                    await arr_each_promise_all_1.default([], promiseFunction);
                    expect(total).toBe(15);
                });
            });
        }
    };
});
System.register("io/promises/index", ["io/promises/arr_each_promise_all", "io/promises/sleep"], function (exports_56, context_56) {
    "use strict";
    var arr_each_promise_all_2, sleep_3, arr_each_promise_all, sleep;
    var __moduleName = context_56 && context_56.id;
    return {
        setters: [
            function (arr_each_promise_all_2_1) {
                arr_each_promise_all_2 = arr_each_promise_all_2_1;
            },
            function (sleep_3_1) {
                sleep_3 = sleep_3_1;
            }
        ],
        execute: function () {
            exports_56("arr_each_promise_all", arr_each_promise_all = arr_each_promise_all_2.default);
            exports_56("sleep", sleep = sleep_3.default);
        }
    };
});
System.register("io/req/aggregate_req_body_query_params", ["io/json/json_parse"], function (exports_57, context_57) {
    "use strict";
    var json_parse_3;
    var __moduleName = context_57 && context_57.id;
    /**
     * Parse and combine POST data and URL params into JavaScript object
     * @param req {object} - IMPORTANT: does not have to be real api request. Can be simple object.
     * @param req.body {object} - key/value pairs, already parsed and ready to use (ex: {options:{}})
     * @param req.query {object} - object of key/value pairs from URL query string (ex: ?str=wordio&tld=co)
     *    will override req.body. Values will be processed by decodeURIComponent
     * @param req.params {object} - object of key/value pairs from URL path  (ex: /v1/word/:key)
     *    will override req.query. Values will be processed by decodeURIComponent
     * @returns {{}} - combined keys/values. Original request object will NOT be modified.
     */
    function aggregate_req_body_query_params(req) {
        /*
         * 1. prepare output
         */
        let output = {};
        // req.body is least important, will be overridden by query/params
        if (req.body) {
            output = req.body;
        }
        /*
         * 2. aggregate inputs
         */
        // req.query is more important than req.body
        let inputs = {};
        if (req.query) {
            inputs = req.query;
        }
        // req.params is the most important
        if (req.params) {
            for (let key in req.params) {
                let val = req.params[key];
                if (val && val !== 0) {
                    inputs[key] = val;
                }
            }
        }
        /*
         * 3. process inputs
         */
        if (inputs) {
            for (let key in inputs) {
                let val = inputs[key];
                val = decodeURIComponent(val);
                val = json_parse_3.default(val); // convert "null" to null, same with other encoded variable types like undefined, false, 0
                output[key] = val;
            }
        }
        // combined
        return output;
    }
    exports_57("default", aggregate_req_body_query_params);
    return {
        setters: [
            function (json_parse_3_1) {
                json_parse_3 = json_parse_3_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("io/req/_.test", ["io/req/aggregate_req_body_query_params"], function (exports_58, context_58) {
    "use strict";
    var aggregate_req_body_query_params_1;
    var __moduleName = context_58 && context_58.id;
    return {
        setters: [
            function (aggregate_req_body_query_params_1_1) {
                aggregate_req_body_query_params_1 = aggregate_req_body_query_params_1_1;
            }
        ],
        execute: function () {
            describe("req", () => {
                it("aggregate_req_body_query_params", () => {
                    let req = {
                        body: {
                            a: 1
                        },
                        query: {
                            b: 2
                        },
                        params: {
                            c: 3
                        }
                    };
                    const obj = aggregate_req_body_query_params_1.default(req);
                    expect(obj.a).toBe(1);
                    expect(obj.b).toBe(2);
                    expect(obj.c).toBe(3);
                });
            });
        }
    };
});
System.register("io/req/index", ["io/req/aggregate_req_body_query_params"], function (exports_59, context_59) {
    "use strict";
    var aggregate_req_body_query_params_2, aggregate_req_body_query_params;
    var __moduleName = context_59 && context_59.id;
    return {
        setters: [
            function (aggregate_req_body_query_params_2_1) {
                aggregate_req_body_query_params_2 = aggregate_req_body_query_params_2_1;
            }
        ],
        execute: function () {
            exports_59("aggregate_req_body_query_params", aggregate_req_body_query_params = aggregate_req_body_query_params_2.default);
        }
    };
});
System.register("io/sort_objects/sort_objects_by_property_and_position", [], function (exports_60, context_60) {
    "use strict";
    var __moduleName = context_60 && context_60.id;
    /**
     * Sort array of strings by separate dictionary of [{string:rating},], and
     * also by position in array. Items at front of array will be rated higher.
     */
    function default_2(
    /**
     * array of strings to be sorted
     */
    arr, 
    /**
     * which property of object to use as sort rating (its value must be a number)
     */
    rating_key, 
    /**
     * make position x times more important than rating (default 1)
     *     It's kind of backwards - Make it less than 1 to make rating more important. 0.5 is a good start. Just need to try it until you get a good value. In a very long list, ok to make it 0.1 or even 0.01.
     */
    multiply_position = 1) {
        if (!arr)
            return [];
        arr = [...arr];
        let that = {
            rating_key: rating_key,
            multiply_position: multiply_position
        };
        // rating_key
        for (let obj of arr) {
            let rate = obj[rating_key];
            // compare ratings to each other
            if (that.min_rating === undefined || rate < that.min_rating) {
                that.min_rating = rate;
            }
            if (that.max_rating === undefined || rate > that.max_rating) {
                that.max_rating = rate;
            }
        }
        that.delta_rating = that.max_rating - that.min_rating;
        that.median_rating = that.min_rating + that.delta_rating / 2;
        // prepare position
        that.min_index = 0;
        that.max_index = arr.length - 1;
        for (let i in arr) {
            // count up - first item = 0, last item = (length-1)
            // @ts-ignore
            arr[i].sort_index = i; // add *TEMPORARY* value to string - can't be stringified/saved, only for [].sort() helper
        }
        that.delta_index = that.max_index - that.min_index;
        // sort
        arr = arr.sort(sort_strings_by_rating_and_position__helper.bind(that));
        return arr.map((obj) => {
            delete obj.sort_index; // remove *TEMPORARY* value from string
            return obj;
        });
    }
    exports_60("default", default_2);
    /**
     * Array.sort() function
     */
    function sort_strings_by_rating_and_position__helper(a, b) {
        // higher == better
        // normalized to 0-1 range
        // highest rating gets 1, lowest rating gets 0
        let a_rating = (this.delta_rating -
            (this.max_rating - (typeof a[this.rating_key] !== "undefined" ? a[this.rating_key] : this.median_rating))) /
            this.delta_rating;
        let b_rating = (this.delta_rating -
            (this.max_rating - (typeof b[this.rating_key] !== "undefined" ? b[this.rating_key] : this.median_rating))) /
            this.delta_rating;
        // higher == better
        // normalized to 0-1 range
        // lowest index gets 1, highest index gets 0
        // (multiply_position to make position score more important than rating score)
        let a_index = ((this.max_index - a.sort_index) / this.delta_index) * this.multiply_position;
        let b_index = ((this.max_index - b.sort_index) / this.delta_index) * this.multiply_position;
        // combine the two
        // if b is higher, then sort it closer to front of array compared to a
        return b_rating + b_index - (a_rating + a_index);
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/sort_objects/sort_objects_by_property", [], function (exports_61, context_61) {
    "use strict";
    var __moduleName = context_61 && context_61.id;
    /**
     * Sort array of objects by property
     *    NOTE: this is just like _.sortBy() but can only sort by one property instead of multiple
     *    This is simply a simplified copy of `sort_objects_by_property_and_position()`
     *    Like `sort_objects_by_property_and_position()`, but without caring about the position.
     * @param arr - array of objects to be sorted
     * @param prop1_key - property to use, to sort by. Each object in array must contain this key
     * @param prop1_desc {boolean} - by default, will sort ASC, but if this is true, will sort DESC
     * @return - array of objects, sorted
     */
    function sort_objects_by_property(arr, prop1_key, prop1_desc = false) {
        if (!arr)
            return [];
        arr = [...arr];
        return arr.sort(sort_objects_by_property__helper.bind({ arr, prop1_key, prop1_desc }));
    }
    exports_61("default", sort_objects_by_property);
    // helper function:
    function sort_objects_by_property__helper(a, b) {
        // sort by rating
        let a_rating = a[this.prop1_key];
        let b_rating = b[this.prop1_key];
        // sort order
        if (!this.prop1_desc) {
            // prefer lower number
            // if b is lower, then rate it better than a
            return a_rating - b_rating;
        }
        else {
            // prefer higher number
            // if b is higher, then rate it better than a
            return b_rating - a_rating;
        }
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/sort_objects/index", ["io/sort_objects/sort_objects_by_property_and_position", "io/sort_objects/sort_objects_by_property"], function (exports_62, context_62) {
    "use strict";
    var sort_objects_by_property_and_position_1, sort_objects_by_property_1, sort_objects_by_property_and_position, sort_objects_by_property;
    var __moduleName = context_62 && context_62.id;
    return {
        setters: [
            function (sort_objects_by_property_and_position_1_1) {
                sort_objects_by_property_and_position_1 = sort_objects_by_property_and_position_1_1;
            },
            function (sort_objects_by_property_1_1) {
                sort_objects_by_property_1 = sort_objects_by_property_1_1;
            }
        ],
        execute: function () {
            exports_62("sort_objects_by_property_and_position", sort_objects_by_property_and_position = sort_objects_by_property_and_position_1.default);
            exports_62("sort_objects_by_property", sort_objects_by_property = sort_objects_by_property_1.default);
        }
    };
});
System.register("io/sort_objects/sort_objects_by_property.test", ["io/sort_objects/sort_objects_by_property"], function (exports_63, context_63) {
    "use strict";
    var sort_objects_by_property_2;
    var __moduleName = context_63 && context_63.id;
    return {
        setters: [
            function (sort_objects_by_property_2_1) {
                sort_objects_by_property_2 = sort_objects_by_property_2_1;
            }
        ],
        execute: function () {
            describe("sort_objects_by_property", () => {
                const arr = [{ key: 3 }, { key: 1 }, { key: 2 }];
                it("sorts correctly", () => {
                    expect(sort_objects_by_property_2.default(arr, "key")).toEqual([{ key: 1 }, { key: 2 }, { key: 3 }]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([{ key: 3 }, { key: 1 }, { key: 2 }]);
                });
            });
        }
    };
});
System.register("io/sort_objects/sort_objects_by_property_and_position.test", ["io/sort_objects/sort_objects_by_property_and_position"], function (exports_64, context_64) {
    "use strict";
    var sort_objects_by_property_and_position_2;
    var __moduleName = context_64 && context_64.id;
    return {
        setters: [
            function (sort_objects_by_property_and_position_2_1) {
                sort_objects_by_property_and_position_2 = sort_objects_by_property_and_position_2_1;
            }
        ],
        execute: function () {
            describe("sort_objects_by_property_and_position", () => {
                const arr = [
                    { key: 3 },
                    { key: 3 },
                    { key: 4 },
                    { key: 4 },
                    { key: 1 },
                    { key: 1 },
                    { key: 2 },
                    { key: 2 },
                    { key: 5 },
                    { key: 5 },
                    { key: 6 },
                    { key: 6 }
                ];
                it("sorts correctly - keeping current position as much as possible", () => {
                    expect(sort_objects_by_property_and_position_2.default(arr, "key")).toEqual([
                        {
                            key: 4
                        },
                        {
                            key: 3
                        },
                        {
                            key: 4
                        },
                        {
                            key: 3
                        },
                        {
                            key: 6
                        },
                        {
                            key: 5
                        },
                        {
                            key: 6
                        },
                        {
                            key: 5
                        },
                        {
                            key: 2
                        },
                        {
                            key: 1
                        },
                        {
                            key: 2
                        },
                        {
                            key: 1
                        }
                    ]);
                });
                it("sorts agressively - prefering the rating (key) over existing position", () => {
                    expect(sort_objects_by_property_and_position_2.default(arr, "key", 0.5)).toEqual([
                        {
                            key: 6
                        },
                        {
                            key: 4
                        },
                        {
                            key: 6
                        },
                        {
                            key: 4
                        },
                        {
                            key: 5
                        },
                        {
                            key: 3
                        },
                        {
                            key: 5
                        },
                        {
                            key: 3
                        },
                        {
                            key: 2
                        },
                        {
                            key: 2
                        },
                        {
                            key: 1
                        },
                        {
                            key: 1
                        }
                    ]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([
                        { key: 3 },
                        { key: 3 },
                        { key: 4 },
                        { key: 4 },
                        { key: 1 },
                        { key: 1 },
                        { key: 2 },
                        { key: 2 },
                        { key: 5 },
                        { key: 5 },
                        { key: 6 },
                        { key: 6 }
                    ]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_domains_by_extension", [], function (exports_65, context_65) {
    "use strict";
    var __moduleName = context_65 && context_65.id;
    /**
     * Used to sort a list of domain names by their domain extension - putting best ones higher in list.
     * @param domains {Array<String>} - list of domains - each string must contain at least one period "."
     * @param extensions {array} - list of extensions (domain extensions) to sort by. Best = first. Worst = last.
     * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.
     *    By default, THIS IS NOT A PURE FUNCTION, it modifies the original array. Unless this is set to `true`.
     * @returns {array} - sorted array
     */
    function sort_domains_by_extension(domains, extensions) {
        if (!domains || !domains.length)
            return [];
        /**
         * xRs - dictionary of extensions with the dot "R"eplaced
         */
        const xRs = {};
        for (let x of extensions) {
            xRs[x] = x.replace(".", "").toLowerCase().trim();
        }
        const dRs = domains.map((d) => {
            d.toLowerCase().trim();
            // if the ending of d matches a key of xRs, replace it with the value of xRs
            for (let x in xRs) {
                if (d.endsWith(x)) {
                    return d.replace(x, xRs[x]);
                }
            }
            return d;
        });
        return dRs.sort(sort_domains_by_extension__helper.bind(Object.values(xRs)));
    }
    exports_65("default", sort_domains_by_extension);
    function sort_domains_by_extension__helper(a, b) {
        let a_score = this.indexOf(a.substr(a.lastIndexOf(".") + 1));
        let b_score = this.indexOf(b.substr(b.lastIndexOf(".") + 1));
        return a_score - b_score;
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/sort_strings/sort_strings_by_length", [], function (exports_66, context_66) {
    "use strict";
    var __moduleName = context_66 && context_66.id;
    /**
     * Sort input array by number of characters in string (or number cast to string)
     * Will sort ASC by default. Pass second parameter to sort by DESC.
     * @param {array} arr - expects array of strings,
     *       but will also accept array of anything,
     *       will cast any child to string `arr[i].toString()`
     * @param {boolean} desc - sort descending?
     *       if false or undefined, will be sorted ascending
     * @returns {array} arr - also modifies original array to returned value!
     */
    function sort_strings_by_length(arr, desc = false) {
        if (!arr || !arr.length)
            return [];
        arr = [...arr];
        let sort_func = help_sort_strings_by_length.bind({ desc });
        return arr.sort(sort_func);
    }
    exports_66("default", sort_strings_by_length);
    /**
     * Usage: `[].sort(help_sort_strings_by_length)`
     * Note: NOT EXPORTED
     */
    function help_sort_strings_by_length(a, b) {
        let desc = this.desc;
        if (desc) {
            return b.toString().length - a.toString().length;
        }
        return a.toString().length - b.toString().length;
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/sort_strings/sort_strings_by_length_and_position", ["io/sort_strings/sort_strings_by_length"], function (exports_67, context_67) {
    "use strict";
    var sort_strings_by_length_1;
    var __moduleName = context_67 && context_67.id;
    /**
     * Algorithm sort = by string length + by current position in array
     *     NEEDS REFACTOR: does [].sort() twice!
     * @param arr - array of strings
     * @param prefer_position - number to multiply position rating, to make it more important than length
     * @param fix_min_length - absolute minimum allowed to be used as min_length (default 4)
     *      ex: if 4, algorithm will treat str.length of 2,3,4 the same
     */
    function sort_strings_by_length_and_position(arr, 
    /**
     * make position x times more important than rating (default 1)
     *     It's kind of backwards - Make it less than 1 to make rating more important. 0.5 is a good start. Just need to try it until you get a good value. In a very long list, ok to make it 0.1 or even 0.01.
     */
    prefer_position = 1, fix_min_length = 0) {
        if (!arr || !arr.length)
            return [];
        arr = [...arr];
        try {
            // prepare ratings by length
            let ascending = sort_strings_by_length_1.default([...arr]);
            // prepare ratings by position
            let arr_positions = {};
            for (let i in arr) {
                let string = arr[i];
                arr_positions[string] = i;
            }
            // compile ratings
            // ${this} in [].sort()
            let that = {
                min_length: ascending[0].length,
                max_length: ascending[ascending.length - 1].length,
                min_position: 0,
                max_position: arr.length,
                delta_position: arr.length,
                arr_positions: arr_positions,
                prefer_position: prefer_position
            };
            // ${this} fix & finish
            if (fix_min_length) {
                that.fix_min_length = fix_min_length;
                that.min_length = fix_min_length;
            }
            that.delta_length = that.max_length - that.min_length;
            // done
            return arr.sort(sort_strings_by_length_and_position_asc__helper.bind(that));
        }
        catch (e) {
            console.error("invalid input array to sort_strings_by_length_and_position()");
            return arr;
        }
    }
    exports_67("default", sort_strings_by_length_and_position);
    // helper function:
    function sort_strings_by_length_and_position_asc__helper(a, b) {
        // if length is less than absolute minimum, use absolute minimum
        let a_length = a.length;
        let b_length = b.length;
        if (this.fix_min_length) {
            if (a.length < this.fix_min_length)
                a_length = this.fix_min_length;
            if (b.length < this.fix_min_length)
                b_length = this.fix_min_length;
        }
        // lower number == good (prefer shorter words)
        let a_rating_length = (a_length - this.min_length) / this.delta_length;
        let b_rating_length = (b_length - this.min_length) / this.delta_length;
        // lower number == good (lower index in array, so started closer to #1)
        let a_position_length = ((this.arr_positions[a] - this.min_position) / this.delta_position) * this.prefer_position;
        let b_position_length = ((this.arr_positions[b] - this.min_position) / this.delta_position) * this.prefer_position;
        // combine the two
        return a_rating_length + a_position_length - (b_rating_length + b_position_length);
    }
    return {
        setters: [
            function (sort_strings_by_length_1_1) {
                sort_strings_by_length_1 = sort_strings_by_length_1_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("io/sort_strings/sort_strings_by_matches_in_list", [], function (exports_68, context_68) {
    "use strict";
    var __moduleName = context_68 && context_68.id;
    /**
     * Sort strings by relevance (matching words in list)
     * Strings will be promoted if they match most words in list, and have fewest remaining characters.
     * @param arr - list of strings
     *      (this function modifies the original array, using .sort())
     * @param matchList - list of words - first in list is most important
     * @returns - sorted array or strings
     */
    function sort_strings_by_matches_in_list(arr, matchList) {
        if (!arr || !arr.length)
            return [];
        arr = [...arr];
        let ratings = {};
        for (let str of arr) {
            let string = str.replace(/[^a-z0-9]/gi, "");
            let count = 0;
            for (let word of matchList) {
                if (string.includes(word)) {
                    count++;
                    string = string.replace(word, "");
                }
            }
            ratings[str] = count;
        }
        return arr.sort(sort_strings_by_matches_in_list__helper.bind(ratings));
    }
    exports_68("default", sort_strings_by_matches_in_list);
    function sort_strings_by_matches_in_list__helper(a, b) {
        let a_score = this[a] || 0;
        let b_score = this[b] || 0;
        return b_score - a_score;
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/sort_strings/sort_strings_by_rating_and_position", [], function (exports_69, context_69) {
    "use strict";
    var __moduleName = context_69 && context_69.id;
    /**
     * Sort array of strings by separate dictionary of ratings and
     * also by position in array. Items at front of array will be rated higher.
     */
    function sort_strings_by_rating_and_position(
    /**
     * array of strings to be sorted
     */
    arr, 
    /**
     * dictionary of {string:rating}
     *      ratings does not have to contain an entry for each arr item
     *          if missing, will be given default 0
     *      likewise, it may contain more entries than arr,
     *          extras will be ignored
     */
    ratings, 
    /**
     * make position x times more important than rating (default 1)
     *     It's kind of backwards - Make it less than 1 to make rating more important. 0.5 is a good start. Just need to try it until you get a good value. In a very long list, ok to make it 0.1 or even 0.01.
     */
    multiply_position = 1, 
    /**
     * By default, this function will modify the arr, using arr.sort(). Set `true` to make this a pure function.
     */
    immutable = false) {
        if (!arr)
            return [];
        arr = [...arr];
        let that = { ratings, indexes: {}, multiply_position };
        // ratings
        for (let str in ratings) {
            let rate = ratings[str];
            // compare ratings to each other
            if (that.min_rating === undefined || rate < that.min_rating) {
                that.min_rating = rate;
            }
            if (that.max_rating === undefined || rate > that.max_rating) {
                that.max_rating = rate;
            }
        }
        that.delta_rating = that.max_rating - that.min_rating;
        that.median_rating = that.min_rating + that.delta_rating / 2;
        // prepare position indexes
        that.min_index = 0;
        that.max_index = arr.length - 1;
        for (let i in arr) {
            // count up - first item = 0, last item = (length-1)
            let string = arr[i];
            that.indexes[string] = i;
        }
        that.delta_index = that.max_index - that.min_index;
        // sort
        return arr.sort(sort_strings_by_rating_and_position__helper.bind(that));
    }
    exports_69("default", sort_strings_by_rating_and_position);
    /**
     * Array.sort() function
     */
    function sort_strings_by_rating_and_position__helper(a, b) {
        // higher == better
        // normalized to 0-1 range
        // highest rating gets 1, lowest rating gets 0
        let a_rating = (this.delta_rating -
            (this.max_rating - (typeof this.ratings[a] !== "undefined" ? this.ratings[a] : this.median_rating))) /
            this.delta_rating;
        let b_rating = (this.delta_rating -
            (this.max_rating - (typeof this.ratings[b] !== "undefined" ? this.ratings[b] : this.median_rating))) /
            this.delta_rating;
        // higher == better
        // normalized to 0-1 range
        // lowest index gets 1, highest index gets 0
        // (multiply_position to make position score more important than rating score)
        let a_index = ((this.max_index - this.indexes[a]) / this.delta_index) * this.multiply_position;
        let b_index = ((this.max_index - this.indexes[b]) / this.delta_index) * this.multiply_position;
        // combine the two
        // if b is higher, then sort it closer to front of array compared to a
        return b_rating + b_index - (a_rating + a_index);
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/sort_strings/sort_strings_by_rating", [], function (exports_70, context_70) {
    "use strict";
    var __moduleName = context_70 && context_70.id;
    /**
     * Sort array of strings by separate dictionary of [{string:rating},]
     * However, will be sorted not in relation to other ratings, but in relation to zero 0.
     * If higher than 0, will be promoted. Lower than 0 will be demoted to back of list.
     * (Todo: File/Function should be renamed, to reflect this relation to zero!)
     * @param arr {Array<String>} - array of strings
     * @param ratings {object} - dictionary of {string:rating}
     *      rating lt 0 == bad, gt 0 == good, if undefined, default 0
     * @return {Array<String>} - array of strings
     */
    function sort_strings_by_rating(arr, ratings) {
        if (!arr)
            return [];
        arr = [...arr];
        // compile ratings
        let scores = {};
        for (let string of arr) {
            // from dictionary of {string:rating}
            // good == above zero; bad == below zero;
            scores[string] = ratings[string] || 0;
        }
        return arr.sort(sort_strings_by_rating__helper.bind(scores));
    }
    exports_70("default", sort_strings_by_rating);
    // helper function:
    function sort_strings_by_rating__helper(a, b) {
        let a_rating = this[a];
        let b_rating = this[b];
        // prefer higher number
        // if b is higher, then rate it better than a
        return b_rating - a_rating;
    }
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/word/word_width", [], function (exports_71, context_71) {
    "use strict";
    var char_width_plus;
    var __moduleName = context_71 && context_71.id;
    /**
     * Get pixel width of characters in word
     * Works best with a simple word, but can do sentences, paragraphs, array of strings, numbers, etc.
     * Not perfect, only a relative general ballpark figure. Of course in reality it depends what font/size you use.
     * @param {string|number|array} str - works best with {string}, but will convert an array or number .toString()
     */
    function word_width(str) {
        str = (str || "").toString(); // cast to string
        let width = 0;
        for (let char of str) {
            width += char_width_plus[char.toLowerCase()] || 10; // default to high number if not standard letter/number/space
        }
        return width;
    }
    exports_71("default", word_width);
    return {
        setters: [],
        execute: function () {
            char_width_plus = {
                "0": 7,
                "1": 4,
                "2": 6,
                "3": 7,
                "4": 7,
                "5": 7,
                "6": 7,
                "7": 6,
                "8": 7,
                "9": 7,
                "a": 6,
                "b": 7,
                "c": 6,
                "d": 7,
                "e": 6,
                "f": 2,
                "g": 6,
                "h": 6,
                "i": 3,
                "j": 2,
                "k": 5,
                "l": 3,
                "m": 9,
                "n": 6,
                "o": 6,
                "p": 6,
                "q": 6,
                "r": 3,
                "s": 5,
                "t": 3,
                "u": 6,
                "v": 5,
                "w": 9,
                "x": 5,
                "y": 5,
                "z": 5,
                " ": 7
            };
        }
    };
});
System.register("io/sort_strings/sort_strings_by_width", ["io/word/word_width"], function (exports_72, context_72) {
    "use strict";
    var word_width_1;
    var __moduleName = context_72 && context_72.id;
    /**
     * Sort input array NOT JUST by number of characters in string (like sort_strings_by_length),
     * but instead, sort by width of the "word".
     *       Skinny letters like "i" and "l" will be sorted higher (if asc).
     *       Wide letters like "w" and "m" will be sorted lower (if asc).
     *       To sort wider strings higher, set `desc` to `true`.
     * @param {array} arr - expects array of strings,
     *       but will also accept array of anything,
     *       will cast any child to string `arr[i].toString()`
     * @param {boolean} desc - sort descending?
     *       if false or undefined, will be sorted ascending
     * @returns {array} arr - also modifies original array to returned value!
     */
    function sort_strings_by_width(arr, desc = false) {
        arr = [...arr];
        let sort_func = help_sort_strings_by_width.bind({ desc });
        return arr.sort(sort_func);
    }
    exports_72("default", sort_strings_by_width);
    function help_sort_strings_by_width(a, b) {
        let desc = this.desc;
        let a_width = word_width_1.default(JSON.stringify(a || ""));
        let b_width = word_width_1.default(JSON.stringify(b || ""));
        if (desc) {
            return b_width - a_width;
        }
        return a_width - b_width;
    }
    return {
        setters: [
            function (word_width_1_1) {
                word_width_1 = word_width_1_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("io/sort_strings/index", ["io/sort_strings/sort_domains_by_extension", "io/sort_strings/sort_strings_by_length_and_position", "io/sort_strings/sort_strings_by_length", "io/sort_strings/sort_strings_by_matches_in_list", "io/sort_strings/sort_strings_by_rating_and_position", "io/sort_strings/sort_strings_by_rating", "io/sort_strings/sort_strings_by_width"], function (exports_73, context_73) {
    "use strict";
    var sort_domains_by_extension_1, sort_strings_by_length_and_position_1, sort_strings_by_length_2, sort_strings_by_matches_in_list_1, sort_strings_by_rating_and_position_1, sort_strings_by_rating_1, sort_strings_by_width_1, sort_domains_by_extension, sort_strings_by_length_and_position, sort_strings_by_length, sort_strings_by_matches_in_list, sort_strings_by_rating_and_position, sort_strings_by_rating, sort_strings_by_width;
    var __moduleName = context_73 && context_73.id;
    return {
        setters: [
            function (sort_domains_by_extension_1_1) {
                sort_domains_by_extension_1 = sort_domains_by_extension_1_1;
            },
            function (sort_strings_by_length_and_position_1_1) {
                sort_strings_by_length_and_position_1 = sort_strings_by_length_and_position_1_1;
            },
            function (sort_strings_by_length_2_1) {
                sort_strings_by_length_2 = sort_strings_by_length_2_1;
            },
            function (sort_strings_by_matches_in_list_1_1) {
                sort_strings_by_matches_in_list_1 = sort_strings_by_matches_in_list_1_1;
            },
            function (sort_strings_by_rating_and_position_1_1) {
                sort_strings_by_rating_and_position_1 = sort_strings_by_rating_and_position_1_1;
            },
            function (sort_strings_by_rating_1_1) {
                sort_strings_by_rating_1 = sort_strings_by_rating_1_1;
            },
            function (sort_strings_by_width_1_1) {
                sort_strings_by_width_1 = sort_strings_by_width_1_1;
            }
        ],
        execute: function () {
            exports_73("sort_domains_by_extension", sort_domains_by_extension = sort_domains_by_extension_1.default);
            exports_73("sort_strings_by_length_and_position", sort_strings_by_length_and_position = sort_strings_by_length_and_position_1.default);
            exports_73("sort_strings_by_length", sort_strings_by_length = sort_strings_by_length_2.default);
            exports_73("sort_strings_by_matches_in_list", sort_strings_by_matches_in_list = sort_strings_by_matches_in_list_1.default);
            exports_73("sort_strings_by_rating_and_position", sort_strings_by_rating_and_position = sort_strings_by_rating_and_position_1.default);
            exports_73("sort_strings_by_rating", sort_strings_by_rating = sort_strings_by_rating_1.default);
            exports_73("sort_strings_by_width", sort_strings_by_width = sort_strings_by_width_1.default);
        }
    };
});
System.register("io/sort_strings/sort_domains_by_extension.test", ["io/sort_strings/sort_domains_by_extension"], function (exports_74, context_74) {
    "use strict";
    var sort_domains_by_extension_2;
    var __moduleName = context_74 && context_74.id;
    return {
        setters: [
            function (sort_domains_by_extension_2_1) {
                sort_domains_by_extension_2 = sort_domains_by_extension_2_1;
            }
        ],
        execute: function () {
            describe("sort_domains_by_extension", () => {
                const arr = [
                    "astrobin.ws",
                    "lalalalala.la",
                    "something.in",
                    "artspaces.net",
                    "www.google.co.uk",
                    "www.google.co.jp",
                    "www.google.com",
                    "www.google.co.in",
                    "www.google.co.nz",
                    "paulshorey.com"
                ];
                const ext = ["com", "net", "uk", "jp", "in", "nz", "ws", "la"];
                let sorted = sort_domains_by_extension_2.default(arr, ext);
                it("sorts correctly", () => {
                    expect(sorted).toEqual([
                        "www.google.com",
                        "paulshorey.com",
                        "artspaces.net",
                        "www.google.co.uk",
                        "www.google.co.jp",
                        "something.in",
                        "www.google.co.in",
                        "www.google.co.nz",
                        "astrobin.ws",
                        "lalalalala.la"
                    ]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([
                        "astrobin.ws",
                        "lalalalala.la",
                        "something.in",
                        "artspaces.net",
                        "www.google.co.uk",
                        "www.google.co.jp",
                        "www.google.com",
                        "www.google.co.in",
                        "www.google.co.nz",
                        "paulshorey.com"
                    ]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_strings_by_length.test", ["io/sort_strings/sort_strings_by_length"], function (exports_75, context_75) {
    "use strict";
    var sort_strings_by_length_3;
    var __moduleName = context_75 && context_75.id;
    return {
        setters: [
            function (sort_strings_by_length_3_1) {
                sort_strings_by_length_3 = sort_strings_by_length_3_1;
            }
        ],
        execute: function () {
            describe("sort_strings_by_length", () => {
                const arr = [
                    "astrobin.ws",
                    "lalalalala.la",
                    "something.in",
                    "artspaces.net",
                    "google.uk",
                    "google.jp",
                    "google.com",
                    "google.in",
                    "google.nz",
                    "paulshorey.com"
                ];
                it("sorts ascending", () => {
                    expect(sort_strings_by_length_3.default(arr)).toEqual([
                        "google.uk",
                        "google.jp",
                        "google.in",
                        "google.nz",
                        "google.com",
                        "astrobin.ws",
                        "something.in",
                        "lalalalala.la",
                        "artspaces.net",
                        "paulshorey.com"
                    ]);
                });
                it("sorts descending", () => {
                    expect(sort_strings_by_length_3.default(arr, true)).toEqual([
                        "paulshorey.com",
                        "lalalalala.la",
                        "artspaces.net",
                        "something.in",
                        "astrobin.ws",
                        "google.com",
                        "google.uk",
                        "google.jp",
                        "google.in",
                        "google.nz" // if strings are exact same length, will keep original order
                    ]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([
                        "astrobin.ws",
                        "lalalalala.la",
                        "something.in",
                        "artspaces.net",
                        "google.uk",
                        "google.jp",
                        "google.com",
                        "google.in",
                        "google.nz",
                        "paulshorey.com"
                    ]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_strings_by_length_and_position.test", ["io/sort_strings/sort_strings_by_length_and_position"], function (exports_76, context_76) {
    "use strict";
    var sort_strings_by_length_and_position_2;
    var __moduleName = context_76 && context_76.id;
    return {
        setters: [
            function (sort_strings_by_length_and_position_2_1) {
                sort_strings_by_length_and_position_2 = sort_strings_by_length_and_position_2_1;
            }
        ],
        execute: function () {
            describe("sort_strings_by_length_and_position", () => {
                const arr = [
                    "astroturf.design",
                    "lalalalala.la",
                    "something.in",
                    "artspaces.net",
                    "google.uk",
                    "google.jp",
                    "google.com",
                    "google.in",
                    "google.nz",
                    "paulshorey.com"
                ];
                it("sorts correctly - keeping current position as much as possible", () => {
                    expect(sort_strings_by_length_and_position_2.default(arr)).toEqual([
                        "google.uk",
                        "google.jp",
                        "something.in",
                        "lalalalala.la",
                        "google.in",
                        "google.com",
                        "google.nz",
                        "artspaces.net",
                        "astroturf.design",
                        "paulshorey.com"
                    ]);
                });
                it("sorts agressively - prefering the length over existing position", () => {
                    expect(sort_strings_by_length_and_position_2.default(arr, 0.5)).toEqual([
                        "google.uk",
                        "google.jp",
                        "google.in",
                        "google.nz",
                        "google.com",
                        "something.in",
                        "lalalalala.la",
                        "artspaces.net",
                        "astroturf.design",
                        "paulshorey.com"
                    ]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([
                        "astroturf.design",
                        "lalalalala.la",
                        "something.in",
                        "artspaces.net",
                        "google.uk",
                        "google.jp",
                        "google.com",
                        "google.in",
                        "google.nz",
                        "paulshorey.com"
                    ]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_strings_by_matches_in_list.test", ["io/sort_strings/sort_strings_by_matches_in_list"], function (exports_77, context_77) {
    "use strict";
    var sort_strings_by_matches_in_list_2;
    var __moduleName = context_77 && context_77.id;
    return {
        setters: [
            function (sort_strings_by_matches_in_list_2_1) {
                sort_strings_by_matches_in_list_2 = sort_strings_by_matches_in_list_2_1;
            }
        ],
        execute: function () {
            describe("sort_strings_by_matches_in_list", () => {
                const arr = [
                    "astrobin.ws",
                    "lalalalala.la",
                    "something.in",
                    "artspaces.net",
                    "google.uk",
                    "google.jp",
                    "google.com",
                    "google.in",
                    "google.nz",
                    "paulshorey.com"
                ];
                const match = ["google", "paul", "shorey"];
                it("sorts ascending", () => {
                    expect(sort_strings_by_matches_in_list_2.default(arr, match)).toEqual([
                        "paulshorey.com",
                        "google.uk",
                        "google.jp",
                        "google.com",
                        "google.in",
                        "google.nz",
                        "astrobin.ws",
                        "lalalalala.la",
                        "something.in",
                        "artspaces.net"
                    ]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([
                        "astrobin.ws",
                        "lalalalala.la",
                        "something.in",
                        "artspaces.net",
                        "google.uk",
                        "google.jp",
                        "google.com",
                        "google.in",
                        "google.nz",
                        "paulshorey.com"
                    ]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_strings_by_rating.test", ["io/sort_strings/sort_strings_by_rating"], function (exports_78, context_78) {
    "use strict";
    var sort_strings_by_rating_2;
    var __moduleName = context_78 && context_78.id;
    return {
        setters: [
            function (sort_strings_by_rating_2_1) {
                sort_strings_by_rating_2 = sort_strings_by_rating_2_1;
            }
        ],
        execute: function () {
            describe("sort_strings_by_width", () => {
                const arr = ["a", "c", "b", "f", "d", "e", "g"];
                const ratings = {
                    a: 0,
                    b: 1,
                    c: 2,
                    d: 3,
                    e: 4,
                    f: 5,
                    g: 6,
                    h: 7,
                    i: 8,
                    j: 9,
                    k: 10,
                    l: 11,
                    m: 12,
                    n: 13,
                    o: 14,
                    p: 15,
                    q: 16,
                    r: 17,
                    s: 18,
                    t: 19,
                    u: 20,
                    v: 21,
                    w: 22,
                    x: 23,
                    y: 24,
                    z: 25
                };
                it("sorts correctly (higher rating = first in list)", () => {
                    expect(sort_strings_by_rating_2.default(arr, ratings)).toEqual(["g", "f", "e", "d", "c", "b", "a"]);
                });
                it("didn't change the original order", () => {
                    expect(arr).toEqual(["a", "c", "b", "f", "d", "e", "g"]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_strings_by_rating_and_position.test", ["io/sort_strings/sort_strings_by_rating_and_position"], function (exports_79, context_79) {
    "use strict";
    var sort_strings_by_rating_and_position_2;
    var __moduleName = context_79 && context_79.id;
    return {
        setters: [
            function (sort_strings_by_rating_and_position_2_1) {
                sort_strings_by_rating_and_position_2 = sort_strings_by_rating_and_position_2_1;
            }
        ],
        execute: function () {
            describe("sort_strings_by_rating_and_position", () => {
                const ratings = {
                    "astrobin.ws": 1,
                    "lalalalala.la": 2,
                    "something.in": 15,
                    "artspaces.net": 50,
                    "google.co.uk": 25,
                    "google.co.jp": 25,
                    "google.com": 100,
                    "google.co.in": 15,
                    "google.co.nz": 5,
                    "paulshorey.com": 100
                };
                let arr = Object.keys(ratings);
                it("sorts - by default tries not to change position too much", () => {
                    expect(sort_strings_by_rating_and_position_2.default(arr, ratings)).toEqual([
                        "google.com",
                        "artspaces.net",
                        "astrobin.ws",
                        "paulshorey.com",
                        "something.in",
                        "lalalalala.la",
                        "google.co.uk",
                        "google.co.jp",
                        "google.co.in",
                        "google.co.nz"
                    ]);
                });
                it("sorts aggressively - caring more about rating than position", () => {
                    expect(sort_strings_by_rating_and_position_2.default(arr, ratings, 0.5)).toEqual([
                        "google.com",
                        "paulshorey.com",
                        "artspaces.net",
                        "something.in",
                        "google.co.uk",
                        "astrobin.ws",
                        "google.co.jp",
                        "lalalalala.la",
                        "google.co.in",
                        "google.co.nz"
                    ]);
                });
                it("did not modify original array", () => {
                    expect(arr).toEqual([
                        "astrobin.ws",
                        "lalalalala.la",
                        "something.in",
                        "artspaces.net",
                        "google.co.uk",
                        "google.co.jp",
                        "google.com",
                        "google.co.in",
                        "google.co.nz",
                        "paulshorey.com"
                    ]);
                });
            });
        }
    };
});
System.register("io/sort_strings/sort_strings_by_width.test", ["io/sort_strings/sort_strings_by_width"], function (exports_80, context_80) {
    "use strict";
    var sort_strings_by_width_2;
    var __moduleName = context_80 && context_80.id;
    return {
        setters: [
            function (sort_strings_by_width_2_1) {
                sort_strings_by_width_2 = sort_strings_by_width_2_1;
            }
        ],
        execute: function () {
            describe("sort_strings_by_width", () => {
                /**
                 * Here, width is not visible in mono-spaced font. This is meant for renering text in a browser.
                 * l = skinny, 0 = medium, w = wide
                 */
                const arr = ["00000000", "llllllll", "wwwwwwww"];
                it("sorts ascending", () => {
                    expect(sort_strings_by_width_2.default(arr)).toEqual(["llllllll", "00000000", "wwwwwwww"]);
                });
                it("sorts descending", () => {
                    expect(sort_strings_by_width_2.default(arr, true)).toEqual(["wwwwwwww", "00000000", "llllllll"]);
                });
                it("didn't change the original order", () => {
                    expect(arr).toEqual(["00000000", "llllllll", "wwwwwwww"]);
                });
            });
        }
    };
});
System.register("io/str/str_hash", [], function (exports_81, context_81) {
    "use strict";
    var __moduleName = context_81 && context_81.id;
    /**
     * Quick easy unique hash generator.
     * Not secure or cryptographic.
     * Good for generating IDs from text.
     * Like when entering a new blog or content into a database, when you want to keep your content unique,
     * you can do `let post_id = str_hash(post.author+post.title+post.body)`.
     */
    function str_hash(str) {
        let hash = 0;
        if (str.length === 0) {
            return hash + "";
        }
        for (let i = 0; i < str.length; i++) {
            let char = str.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash + "";
    }
    exports_81("default", str_hash);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/str_capitalize", [], function (exports_82, context_82) {
    "use strict";
    var __moduleName = context_82 && context_82.id;
    /**
     * Capitalize each word in a string. A word is any sequence of characters separated by a space.
     */
    function str_capitalize(string) {
        return string.replace(/\w\S*/g, function (txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    }
    exports_82("default", str_capitalize);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/str_sanitize", [], function (exports_83, context_83) {
    "use strict";
    var __moduleName = context_83 && context_83.id;
    /**
     * Sanitize a string by removing all characters except letters, numbers, and the characters specified in `allowChars`.
     * @param options.allowChars - Default "\\\\w\\\\-_". RegEx fragment of characters to allow. Vale will be placed inside RegExp square brackets. Note: escape any backslashes with one backslash.
     * @param options.allowUppercase - Default false. If true, will allow uppercase letters. Else will convert to lowercase.
     */
    function str_sanitize(str, { allowChars = "\\w\\-_", allowUppercase = false } = {}) {
        // if (!allowChars) {
        //   allowChars = "\\-_";
        // }
        str = str.replace(new RegExp(`[^${allowChars}]+`, "g"), "").trim();
        if (!allowUppercase) {
            str = str.toLowerCase();
        }
        return str;
    }
    exports_83("default", str_sanitize);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/base64_decode", [], function (exports_84, context_84) {
    "use strict";
    var __moduleName = context_84 && context_84.id;
    function base64_decode(str) {
        try {
            return Buffer.from(str, "base64").toString("ascii");
        }
        catch {
            return "";
        }
    }
    exports_84("default", base64_decode);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/base64_encode", [], function (exports_85, context_85) {
    "use strict";
    var __moduleName = context_85 && context_85.id;
    function base64_encode(str) {
        try {
            return Buffer.from(str).toString("base64");
        }
        catch {
            return "";
        }
    }
    exports_85("default", base64_encode);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/str_to_camel_case", [], function (exports_86, context_86) {
    "use strict";
    var __moduleName = context_86 && context_86.id;
    function str_to_camel_case(str) {
        return str
            .replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
            return index === 0 ? word.toLowerCase() : word.toUpperCase();
        })
            .replace(/\s+/g, "");
    }
    exports_86("default", str_to_camel_case);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/_.test", ["io/str/str_hash", "io/str/str_capitalize", "io/str/str_sanitize", "io/str/base64_decode", "io/str/base64_encode", "io/str/str_to_camel_case"], function (exports_87, context_87) {
    "use strict";
    var str_hash_1, str_capitalize_1, str_sanitize_1, base64_decode_1, base64_encode_1, str_to_camel_case_1;
    var __moduleName = context_87 && context_87.id;
    return {
        setters: [
            function (str_hash_1_1) {
                str_hash_1 = str_hash_1_1;
            },
            function (str_capitalize_1_1) {
                str_capitalize_1 = str_capitalize_1_1;
            },
            function (str_sanitize_1_1) {
                str_sanitize_1 = str_sanitize_1_1;
            },
            function (base64_decode_1_1) {
                base64_decode_1 = base64_decode_1_1;
            },
            function (base64_encode_1_1) {
                base64_encode_1 = base64_encode_1_1;
            },
            function (str_to_camel_case_1_1) {
                str_to_camel_case_1 = str_to_camel_case_1_1;
            }
        ],
        execute: function () {
            describe("base64_encode", () => {
                it("can encode properly", () => {
                    const result = base64_encode_1.default("hello");
                    expect(result).toBe("aGVsbG8=");
                });
                it("does not error on invalid arg, returns empty string", () => {
                    // @ts-ignore
                    const result = base64_encode_1.default(9);
                    expect(result).toBe("");
                });
            });
            describe("base64_decode", () => {
                it("can decode properly", () => {
                    const result = base64_decode_1.default("aGVsbG8=");
                    expect(result).toBe("hello");
                });
                it("does not error on invalid arg, returns empty string", () => {
                    // @ts-ignore
                    const result = base64_decode_1.default(9);
                    expect(result).toBe("");
                });
            });
            describe("str", () => {
                it("str_to_camel_case", () => {
                    expect(str_to_camel_case_1.default("few words separated by spaces")).toBe("fewWordsSeparatedBySpaces");
                });
                it("str_hash", () => {
                    expect(str_hash_1.default("californiacation")).toBe("-671277782");
                    expect(str_hash_1.default("dance")).toBe("95350707");
                });
                it("str_capitalize", () => {
                    expect(str_capitalize_1.default("pauly shore")).toBe("Pauly Shore");
                });
                it("str_sanitize", () => {
                    expect(str_sanitize_1.default(" trim-and_remove_Special-Characters!@#$%^&*()_+1234567890 ")).toBe("trim-and_remove_special-characters_1234567890");
                    expect(str_sanitize_1.default(" trim-and_remove_Special-Characters!@#$%^&*()_+1234567890 ", {
                        allowChars: "\\w\\-_\\$\\!",
                        allowUppercase: true
                    })).toBe("trim-and_remove_Special-Characters!$_1234567890");
                    expect(str_sanitize_1.default(" trim-and_remove_Special-Characters!@#$%^&*()_+1234567890 ", {
                        allowChars: "a-zA-Z"
                    })).toBe("trimandremovespecialcharacters");
                });
            });
        }
    };
});
System.register("io/str/str_insert", [], function (exports_88, context_88) {
    "use strict";
    var __moduleName = context_88 && context_88.id;
    function str_insert(string = "", index = 0, insert = "") {
        return string.substring(0, index) + insert + string.substring(index, string.length);
    }
    exports_88("default", str_insert);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/str_syllables_count", [], function (exports_89, context_89) {
    "use strict";
    var __moduleName = context_89 && context_89.id;
    function str_syllables_count(word) {
        word = word.toLowerCase(); //word.downcase!
        if (word.length <= 3) {
            return 1;
        } //return 1 if word.length <= 3
        word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, ""); //word.sub!(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')
        word = word.replace(/^y/, ""); //word.sub!(/^y/, '')
        let match = word.match(/[aeiouy]{1,2}/g);
        return match ? match.length : 0; //word.scan(/[aeiouy]{1,2}/).size
    }
    exports_89("default", str_syllables_count);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/str_trim_char", [], function (exports_90, context_90) {
    "use strict";
    var __moduleName = context_90 && context_90.id;
    /**
     * Trim a character other than whitespace
     * @param s {string} - string
     * @param c {string} - remove this character (or characters) from start/end
     * @returns {void | string}
     */
    function str_trim_char(s, c) {
        if (c === "]")
            c = "\\]";
        if (c === "\\")
            c = "\\\\";
        return s.replace(new RegExp("^[" + c + "]+|[" + c + "]+$", "g"), "");
    }
    exports_90("default", str_trim_char);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/str_trim_non_alpha", [], function (exports_91, context_91) {
    "use strict";
    var __moduleName = context_91 && context_91.id;
    /**
     * Trim all non-alphabetical (not a-zA-Z) characters
     * @param str {string} - string
     * @returns {string}
     */
    function str_trim_non_alpha(str) {
        return str.replace(new RegExp("^[^a-z]+|[^a-z]+$", "gi"), "");
    }
    exports_91("default", str_trim_non_alpha);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/str/index", ["io/str/str_capitalize", "io/str/str_hash", "io/str/str_insert", "io/str/str_sanitize", "io/str/str_syllables_count", "io/str/str_to_camel_case", "io/str/str_trim_char", "io/str/str_trim_non_alpha", "io/str/base64_decode", "io/str/base64_encode"], function (exports_92, context_92) {
    "use strict";
    var str_capitalize_2, str_hash_2, str_insert_1, str_sanitize_2, str_syllables_count_1, str_to_camel_case_2, str_trim_char_1, str_trim_non_alpha_1, base64_decode_2, base64_encode_2, str_capitalize, str_hash, str_insert, str_sanitize, str_syllables_count, str_to_camel_case, str_trim_char, str_trim_non_alpha, base64_decode, base64_encode;
    var __moduleName = context_92 && context_92.id;
    return {
        setters: [
            function (str_capitalize_2_1) {
                str_capitalize_2 = str_capitalize_2_1;
            },
            function (str_hash_2_1) {
                str_hash_2 = str_hash_2_1;
            },
            function (str_insert_1_1) {
                str_insert_1 = str_insert_1_1;
            },
            function (str_sanitize_2_1) {
                str_sanitize_2 = str_sanitize_2_1;
            },
            function (str_syllables_count_1_1) {
                str_syllables_count_1 = str_syllables_count_1_1;
            },
            function (str_to_camel_case_2_1) {
                str_to_camel_case_2 = str_to_camel_case_2_1;
            },
            function (str_trim_char_1_1) {
                str_trim_char_1 = str_trim_char_1_1;
            },
            function (str_trim_non_alpha_1_1) {
                str_trim_non_alpha_1 = str_trim_non_alpha_1_1;
            },
            function (base64_decode_2_1) {
                base64_decode_2 = base64_decode_2_1;
            },
            function (base64_encode_2_1) {
                base64_encode_2 = base64_encode_2_1;
            }
        ],
        execute: function () {
            exports_92("str_capitalize", str_capitalize = str_capitalize_2.default);
            exports_92("str_hash", str_hash = str_hash_2.default);
            exports_92("str_insert", str_insert = str_insert_1.default);
            exports_92("str_sanitize", str_sanitize = str_sanitize_2.default);
            exports_92("str_syllables_count", str_syllables_count = str_syllables_count_1.default);
            exports_92("str_to_camel_case", str_to_camel_case = str_to_camel_case_2.default);
            exports_92("str_trim_char", str_trim_char = str_trim_char_1.default);
            exports_92("str_trim_non_alpha", str_trim_non_alpha = str_trim_non_alpha_1.default);
            exports_92("base64_decode", base64_decode = base64_decode_2.default);
            exports_92("base64_encode", base64_encode = base64_encode_2.default);
        }
    };
});
System.register("io/strings/matrix_horizontal_string_combinations", [], function (exports_93, context_93) {
    "use strict";
    var __moduleName = context_93 && context_93.id;
    /**
     * Flatten a matrix from left to right - generate list of all unique combinations of strings
     * @params matrix {array} - array of arrays of strings, in a matrix format
     * @params delimeter {string} - Default: " ". Separate the combined values.
     * @returns - array of string combinations, separated by space
     */
    function matrix_horizontal_string_combinations(matrix, delimeter = " ") {
        // process each column
        if (!matrix.length) {
            return [];
        }
        else if (matrix.length === 1) {
            return matrix[0];
        }
        else {
            let result = [];
            let allCasesOfRest = matrix_horizontal_string_combinations(matrix.slice(1), delimeter); // recursively push values
            for (let i = 0; i < allCasesOfRest.length; i++) {
                for (let j = 0; j < matrix[0].length; j++) {
                    result.push(matrix[0][j] + delimeter + allCasesOfRest[i]);
                }
            }
            return result;
        }
    }
    exports_93("default", matrix_horizontal_string_combinations);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/strings/strings_shuffle_first_last2", [], function (exports_94, context_94) {
    "use strict";
    var __moduleName = context_94 && context_94.id;
    /**
     * Shuffle list of strings
     *    do not allow two strings to repeat which have the same first letter or same last letter
     * @params strs {array} - array of strings
     * @returns {array} - new array (immutable), of shuffled strs
     */
    function strings_shuffle_first_last2(input_strs = []) {
        let memory_strs = [];
        let unique_strs = [];
        // console.time("1000 loops")
        let loops = 0;
        let old_strs = "";
        infinite_loop: while (loops < 1000) {
            loops++;
            // don't waste time on the same value
            let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0];
            if (new_strs === old_strs) {
                break infinite_loop;
            }
            old_strs = new_strs;
            // no more inputs
            if (!input_strs.length && !memory_strs.length) {
                break infinite_loop;
            }
            // first time
            if (!unique_strs.length) {
                unique_strs.push(input_strs.shift());
                continue infinite_loop;
            }
            // last added string
            let unique_str = unique_strs[unique_strs.length - 1] || ""; // last added
            let unique_str_fl = unique_str[0] || "";
            let unique_str_ll = unique_str[unique_str.length - 1] || "";
            let unique_str2 = unique_strs[unique_strs.length - 2] || ""; // 2nd to last added
            let unique_str2_fl = unique_str2[0] || "";
            let unique_str2_ll = unique_str2[unique_str2.length - 1] || "";
            // insert new str
            // from memory
            if (memory_strs.length) {
                for (let str of memory_strs) {
                    if (!str)
                        continue;
                    let str_fl = str[0];
                    let str_ll = str[str.length - 1];
                    if ((str_fl === unique_str_fl && str_fl === unique_str2_fl) ||
                        (str_ll === unique_str_ll && str_ll === unique_str2_ll)) {
                        // not unique
                        continue;
                    }
                    else {
                        // add unique
                        unique_strs.push(memory_strs.shift());
                        continue infinite_loop;
                    }
                }
            }
            // insert new str
            // from input
            if (input_strs[0]) {
                let str = input_strs.shift();
                let str_fl = str[0];
                let str_ll = str[str.length - 1];
                if ((str_fl === unique_str_fl && str_fl === unique_str2_fl) ||
                    (str_ll === unique_str_ll && str_ll === unique_str2_ll)) {
                    // not unique
                    memory_strs.push(str);
                }
                else {
                    // add unique
                    unique_strs.push(str);
                }
            }
        }
        // console.timeEnd("1000 loops")
        return [...unique_strs, ...memory_strs, ...input_strs];
    }
    exports_94("default", strings_shuffle_first_last2);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/strings/strings_shuffle_first2", [], function (exports_95, context_95) {
    "use strict";
    var __moduleName = context_95 && context_95.id;
    /**
     * Shuffle list of strings
     *    do not allow two strings to repeat which have the same first letter or same last letter
     * @params strs {array} - array of strings
     * @returns {array} - new array (immutable), of shuffled strs
     */
    function strings_shuffle_first2(input_strs = []) {
        let memory_strs = [];
        let unique_strs = [];
        // console.time("1000 loops")
        let loops = 0;
        let old_strs = "";
        infinite_loop: while (loops < 1000) {
            loops++;
            // don't waste time on the same value
            let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0];
            if (new_strs === old_strs) {
                break infinite_loop;
            }
            old_strs = new_strs;
            // no more inputs
            if (!input_strs.length && !memory_strs.length) {
                break infinite_loop;
            }
            // first time
            if (!unique_strs.length) {
                unique_strs.push(input_strs.shift());
                continue infinite_loop;
            }
            // last added string
            let unique_str = unique_strs[unique_strs.length - 1] || ""; // last added
            let unique_str_fl = unique_str[0] || "";
            let unique_str2 = unique_strs[unique_strs.length - 2] || ""; // 2nd to last added
            let unique_str2_fl = unique_str2[0] || "";
            // insert new str
            // from memory
            if (memory_strs.length) {
                for (let str of memory_strs) {
                    if (!str)
                        continue;
                    let str_fl = str[0];
                    if (str_fl === unique_str_fl && str_fl === unique_str2_fl) {
                        // not unique
                        continue;
                    }
                    else {
                        // add unique
                        unique_strs.push(memory_strs.shift());
                        continue infinite_loop;
                    }
                }
            }
            // insert new str
            // from input
            if (input_strs[0]) {
                let str = input_strs.shift();
                let str_fl = str[0];
                if (str_fl === unique_str_fl && str_fl === unique_str2_fl) {
                    // not unique
                    memory_strs.push(str);
                }
                else {
                    // add unique
                    unique_strs.push(str);
                }
            }
        }
        // console.timeEnd("1000 loops")
        // console.log("unique_strs", unique_strs)
        return [...unique_strs, ...memory_strs, ...input_strs];
    }
    exports_95("default", strings_shuffle_first2);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/strings/strings_shuffle_last2", [], function (exports_96, context_96) {
    "use strict";
    var __moduleName = context_96 && context_96.id;
    /**
     * Shuffle list of strings
     *    do not allow two strings to repeat which have the same first letter or same last letter
     * @params strs {array} - array of strings
     * @returns {array} - new array (immutable), of shuffled strs
     */
    function strings_shuffle_last2(input_strs = []) {
        let memory_strs = [];
        let unique_strs = [];
        // console.time("1000 loops")
        let loops = 0;
        let old_strs = "";
        infinite_loop: while (loops < 1000) {
            loops++;
            // don't waste time on the same value
            let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0];
            if (new_strs === old_strs) {
                break infinite_loop;
            }
            old_strs = new_strs;
            // no more inputs
            if (!input_strs.length && !memory_strs.length) {
                break infinite_loop;
            }
            // first time
            if (!unique_strs.length) {
                unique_strs.push(input_strs.shift());
                continue infinite_loop;
            }
            // last added string
            let unique_str = unique_strs[unique_strs.length - 1] || ""; // last added
            let unique_str_ll = unique_str[unique_str.length - 1] || "";
            let unique_str2 = unique_strs[unique_strs.length - 2] || ""; // 2nd to last added
            let unique_str2_ll = unique_str2[unique_str2.length - 1] || "";
            // insert new str
            // from memory
            if (memory_strs.length) {
                for (let str of memory_strs) {
                    if (!str)
                        continue;
                    let str_ll = str[str.length - 1];
                    if (str_ll === unique_str_ll && str_ll === unique_str2_ll) {
                        // not unique
                        continue;
                    }
                    else {
                        // add unique
                        unique_strs.push(memory_strs.shift());
                        continue infinite_loop;
                    }
                }
            }
            // insert new str
            // from input
            if (input_strs[0]) {
                let str = input_strs.shift();
                let str_ll = str[str.length - 1];
                if (str_ll === unique_str_ll && str_ll === unique_str2_ll) {
                    // not unique
                    memory_strs.push(str);
                }
                else {
                    // add unique
                    unique_strs.push(str);
                }
            }
        }
        // console.timeEnd("1000 loops")
        return [...unique_strs, ...memory_strs, ...input_strs];
    }
    exports_96("default", strings_shuffle_last2);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/strings/index", ["io/strings/matrix_horizontal_string_combinations", "io/strings/strings_shuffle_first_last2", "io/strings/strings_shuffle_first2", "io/strings/strings_shuffle_last2"], function (exports_97, context_97) {
    "use strict";
    var matrix_horizontal_string_combinations_1, strings_shuffle_first_last2_1, strings_shuffle_first2_1, strings_shuffle_last2_1, matrix_horizontal_string_combinations, strings_shuffle_first_last2, strings_shuffle_first2, strings_shuffle_last2;
    var __moduleName = context_97 && context_97.id;
    return {
        setters: [
            function (matrix_horizontal_string_combinations_1_1) {
                matrix_horizontal_string_combinations_1 = matrix_horizontal_string_combinations_1_1;
            },
            function (strings_shuffle_first_last2_1_1) {
                strings_shuffle_first_last2_1 = strings_shuffle_first_last2_1_1;
            },
            function (strings_shuffle_first2_1_1) {
                strings_shuffle_first2_1 = strings_shuffle_first2_1_1;
            },
            function (strings_shuffle_last2_1_1) {
                strings_shuffle_last2_1 = strings_shuffle_last2_1_1;
            }
        ],
        execute: function () {
            exports_97("matrix_horizontal_string_combinations", matrix_horizontal_string_combinations = matrix_horizontal_string_combinations_1.default);
            exports_97("strings_shuffle_first_last2", strings_shuffle_first_last2 = strings_shuffle_first_last2_1.default);
            exports_97("strings_shuffle_first2", strings_shuffle_first2 = strings_shuffle_first2_1.default);
            exports_97("strings_shuffle_last2", strings_shuffle_last2 = strings_shuffle_last2_1.default);
        }
    };
});
System.register("io/strings/matrix_horizontal_string_combinations.test", ["io/strings/matrix_horizontal_string_combinations"], function (exports_98, context_98) {
    "use strict";
    var matrix_horizontal_string_combinations_2;
    var __moduleName = context_98 && context_98.id;
    return {
        setters: [
            function (matrix_horizontal_string_combinations_2_1) {
                matrix_horizontal_string_combinations_2 = matrix_horizontal_string_combinations_2_1;
            }
        ],
        execute: function () {
            describe("strings", () => {
                // this needs more thought
                it("matrix_horizontal_string_combinations", () => {
                    expect(matrix_horizontal_string_combinations_2.default([[1], [1, 2], [1, 2, 3]])).toStrictEqual([
                        "1 1 1",
                        "1 2 1",
                        "1 1 2",
                        "1 2 2",
                        "1 1 3",
                        "1 2 3"
                    ]);
                });
            });
        }
    };
});
System.register("io/strings/strings_shuffle_first2.test", ["io/strings/strings_shuffle_first2"], function (exports_99, context_99) {
    "use strict";
    var strings_shuffle_first2_2;
    var __moduleName = context_99 && context_99.id;
    return {
        setters: [
            function (strings_shuffle_first2_2_1) {
                strings_shuffle_first2_2 = strings_shuffle_first2_2_1;
            }
        ],
        execute: function () {
            describe("strings", () => {
                it("strings_shuffle_first2", () => {
                    // shuffles array of strings so not too many consecutive have the same first letter
                    // (does not care about items all ending with the same letter)
                    // it allows maximum 2 items in a row with the same letter
                    expect(strings_shuffle_first2_2.default([
                        "adark",
                        "aspark",
                        "asterisk",
                        "aardvark",
                        "ark",
                        "shark",
                        "dark",
                        "donkey",
                        "dragon",
                        "doom",
                        "mellon",
                        "car",
                        "few",
                        "more",
                        "words"
                    ])).toStrictEqual([
                        "adark",
                        "aspark",
                        "shark",
                        "asterisk",
                        "aardvark",
                        "dark",
                        "ark",
                        "donkey",
                        "dragon",
                        "mellon",
                        "doom",
                        "car",
                        "few",
                        "more",
                        "words"
                    ]);
                });
            });
        }
    };
});
System.register("io/strings/strings_shuffle_first_last2.test", ["io/strings/strings_shuffle_first_last2"], function (exports_100, context_100) {
    "use strict";
    var strings_shuffle_first_last2_2;
    var __moduleName = context_100 && context_100.id;
    return {
        setters: [
            function (strings_shuffle_first_last2_2_1) {
                strings_shuffle_first_last2_2 = strings_shuffle_first_last2_2_1;
            }
        ],
        execute: function () {
            describe("strings", () => {
                it("strings_shuffle_first_last2", () => {
                    // shuffles array of strings so not too many consecutive have the same first letter or last letter
                    // it allows maximum 2 items in a row with the same letter
                    expect(strings_shuffle_first_last2_2.default([
                        "adark",
                        "aspark",
                        "asterisk",
                        "aardvark",
                        "ark",
                        "shark",
                        "dark",
                        "donkey",
                        "dragon",
                        "doom",
                        "mellon",
                        "car",
                        "few",
                        "more",
                        "words"
                    ])).toStrictEqual([
                        "adark",
                        "aspark",
                        "donkey",
                        "asterisk",
                        "aardvark",
                        "dragon",
                        "ark",
                        "shark",
                        "doom",
                        "dark",
                        "mellon",
                        "car",
                        "few",
                        "more",
                        "words"
                    ]);
                });
            });
        }
    };
});
System.register("io/strings/strings_shuffle_last2.test", ["io/strings/strings_shuffle_last2"], function (exports_101, context_101) {
    "use strict";
    var strings_shuffle_last2_2;
    var __moduleName = context_101 && context_101.id;
    return {
        setters: [
            function (strings_shuffle_last2_2_1) {
                strings_shuffle_last2_2 = strings_shuffle_last2_2_1;
            }
        ],
        execute: function () {
            describe("strings", () => {
                it("strings_shuffle_last2", () => {
                    // shuffles array of strings so not too many consecutive have the same last letter
                    // (does not care about items all starting with the same letter)
                    // it allows maximum 2 items in a row with the same letter
                    expect(strings_shuffle_last2_2.default([
                        "adark",
                        "aspark",
                        "asterisk",
                        "aardvark",
                        "ark",
                        "shark",
                        "dark",
                        "donkey",
                        "dragon",
                        "doom",
                        "mellon",
                        "car",
                        "few",
                        "more",
                        "words"
                    ])).toStrictEqual([
                        "adark",
                        "aspark",
                        "donkey",
                        "asterisk",
                        "aardvark",
                        "dragon",
                        "ark",
                        "shark",
                        "doom",
                        "dark",
                        "mellon",
                        "car",
                        "few",
                        "more",
                        "words"
                    ]);
                });
            });
        }
    };
});
System.register("io/word/syllable_count", [], function (exports_102, context_102) {
    "use strict";
    var __moduleName = context_102 && context_102.id;
    /**
     * Quick and clever little script to count syllables in a word (99% accurate)
     */
    function syllable_count(str) {
        if (!str)
            return 0;
        let original = str;
        str = str.replace("ue", "e");
        str = str.substr(0, str.length - 1);
        str = str.replace(/[^aeiouy]+/g, " ");
        let words = str
            .split(" ")
            .map((w) => w.trim())
            .filter((w) => !!w);
        let syllables = words.length;
        return syllables === 0 ? original.length : syllables;
    }
    exports_102("default", syllable_count);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/word/ends_in_vowel", [], function (exports_103, context_103) {
    "use strict";
    var __moduleName = context_103 && context_103.id;
    /**
     * Checks if a word ends in a vowel (including silent e).
     */
    function ends_in_vowel(str) {
        return ["a", "e", "i", "o", "u", "y"].includes(str[str.length - 1]);
    }
    exports_103("default", ends_in_vowel);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/word/is_vowel", [], function (exports_104, context_104) {
    "use strict";
    var __moduleName = context_104 && context_104.id;
    /**
     * Check if string is only one letter, and is a vowel?
     */
    function is_vowel(str) {
        return ["a", "e", "i", "o", "u", "y", "A", "E", "I", "O", "U", "Y"].includes(str);
    }
    exports_104("default", is_vowel);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/word/_.test", ["io/word/syllable_count", "io/word/ends_in_vowel", "io/word/word_width", "io/word/is_vowel"], function (exports_105, context_105) {
    "use strict";
    var syllable_count_1, ends_in_vowel_1, word_width_2, is_vowel_1;
    var __moduleName = context_105 && context_105.id;
    return {
        setters: [
            function (syllable_count_1_1) {
                syllable_count_1 = syllable_count_1_1;
            },
            function (ends_in_vowel_1_1) {
                ends_in_vowel_1 = ends_in_vowel_1_1;
            },
            function (word_width_2_1) {
                word_width_2 = word_width_2_1;
            },
            function (is_vowel_1_1) {
                is_vowel_1 = is_vowel_1_1;
            }
        ],
        execute: function () {
            describe("word", () => {
                it("syllable_count", () => {
                    expect(syllable_count_1.default("californiacation")).toBe(6);
                    expect(syllable_count_1.default("juxtapose")).toBe(3);
                    expect(syllable_count_1.default("taupe")).toBe(1);
                });
                it("ends_in_vowel (including silent e)", () => {
                    expect(ends_in_vowel_1.default("taupe")).toBe(true);
                });
                it("word_width", () => {
                    expect(word_width_2.default("es5")).toBe(5 + 6 + 7);
                });
                it("is_vowel", () => {
                    expect(is_vowel_1.default("e")).toBe(true);
                    expect(is_vowel_1.default("E")).toBe(true);
                    expect(is_vowel_1.default("c")).toBe(false);
                });
            });
        }
    };
});
System.register("io/word/index", ["io/word/ends_in_vowel", "io/word/is_vowel", "io/word/syllable_count", "io/word/word_width"], function (exports_106, context_106) {
    "use strict";
    var ends_in_vowel_2, is_vowel_2, syllable_count_2, word_width_3, ends_in_vowel, is_vowel, syllable_count, word_width;
    var __moduleName = context_106 && context_106.id;
    return {
        setters: [
            function (ends_in_vowel_2_1) {
                ends_in_vowel_2 = ends_in_vowel_2_1;
            },
            function (is_vowel_2_1) {
                is_vowel_2 = is_vowel_2_1;
            },
            function (syllable_count_2_1) {
                syllable_count_2 = syllable_count_2_1;
            },
            function (word_width_3_1) {
                word_width_3 = word_width_3_1;
            }
        ],
        execute: function () {
            exports_106("ends_in_vowel", ends_in_vowel = ends_in_vowel_2.default);
            exports_106("is_vowel", is_vowel = is_vowel_2.default);
            exports_106("syllable_count", syllable_count = syllable_count_2.default);
            exports_106("word_width", word_width = word_width_3.default);
        }
    };
});
System.register("requests/fetcher", ["cachios"], function (exports_107, context_107) {
    "use strict";
    var cachios_1, get, post;
    var __moduleName = context_107 && context_107.id;
    return {
        setters: [
            function (cachios_1_1) {
                cachios_1 = cachios_1_1;
            }
        ],
        execute: function () {
            exports_107("get", get = async function (url, options = {}) {
                console.log(`\n\n\nfetcher_get() ${JSON.stringify([...arguments])}\n\n\n`);
                let data = await cachios_1.default.get(url, options);
                if (data && data.data) {
                    return data.data;
                }
                else {
                    return { error: data };
                }
            });
            exports_107("post", post = async function (url, options = {}) {
                let data = await cachios_1.default.post(url, options);
                if (data && data.data) {
                    return data.data;
                }
                else {
                    return { error: data };
                }
            });
        }
    };
});
System.register("requests/airtable/get_rows", ["airtable"], function (exports_108, context_108) {
    "use strict";
    var airtable_1, base;
    var __moduleName = context_108 && context_108.id;
    /**
     * Get rows from Airtable table
     * @param options.rec - IDK - forget what this is exactly - find record in table
     * @param options.table {string} - name of the "base" in Airtable (*required*)
     * @param options.columns {string} - specify any column that you want to read data from (*required*)
     * @param options.view {string} - Default is "Grid view". Specify if different.
     * @param options.formula {string} - Airtable "formula". Example: `{page} = "general"`.
     * @returns {array} - list of objects. Each object is a row. Each value in the object is a cell.
     */
    function getAirtableRows({ rec, table, columns, view = "Grid view", formula = "" }) {
        return new Promise((resolve) => {
            let output = [];
            if (rec) {
                base(table).find(rec, function (err, record) {
                    if (err) {
                        console.error(err);
                        return;
                    }
                    let row = {};
                    for (let key of columns) {
                        row[key] = record.get(key) || null;
                    }
                    output.push(row);
                    resolve([row]);
                });
                return;
            }
            base(table)
                .select({
                maxRecords: 100,
                view,
                filterByFormula: formula
            })
                .eachPage(function page(records, fetchNextPage) {
                // each cell in row
                records.forEach(function (record) {
                    let row = {};
                    for (let key of columns) {
                        row[key] = record.get(key) || null;
                    }
                    output.push(row);
                });
                // next row
                fetchNextPage();
            }, function done(err) {
                if (err) {
                    console.error(err);
                }
                resolve(output);
            });
        });
    }
    exports_108("default", getAirtableRows);
    return {
        setters: [
            function (airtable_1_1) {
                airtable_1 = airtable_1_1;
            }
        ],
        execute: function () {
            base = new airtable_1.default({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.AIRTABLE_BASE);
        }
    };
});
System.register("requests/notion/2021-05-13", ["requests/fetcher"], function (exports_109, context_109) {
    "use strict";
    var fetcher_1, NOTION_SECRET, CACHE_SECONDS, HEADERS, get_pageMeta, get_pageBlocks;
    var __moduleName = context_109 && context_109.id;
    return {
        setters: [
            function (fetcher_1_1) {
                fetcher_1 = fetcher_1_1;
            }
        ],
        execute: function () {
            NOTION_SECRET = process.env.NOTION_TOKEN;
            CACHE_SECONDS = process.env.NOTION_CACHE || 0;
            if (CACHE_SECONDS) {
                CACHE_SECONDS = Number(CACHE_SECONDS);
            }
            HEADERS = {
                "Notion-Version": "2021-05-13",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${NOTION_SECRET}`
            };
            exports_109("get_pageMeta", get_pageMeta = async (pageId) => {
                console.log("get page...", pageId);
                let data = await fetcher_1.get(`https://api.notion.com/v1/pages/${pageId}`, {
                    headers: HEADERS,
                    ttl: CACHE_SECONDS
                });
                if (!data || !data.id) {
                    data = null;
                }
                return data;
            });
            exports_109("get_pageBlocks", get_pageBlocks = async (blockId) => {
                console.log("get blocks...", blockId);
                let data = await fetcher_1.get(`https://api.notion.com/v1/blocks/${blockId}/children?page_size=100`, {
                    headers: {
                        "Notion-Version": "2021-05-13",
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${NOTION_SECRET}`
                    },
                    ttl: CACHE_SECONDS
                });
                if (!data || !data.results) {
                    data = [];
                }
                else {
                    data = data.results;
                }
                return data;
            });
        }
    };
});
System.register("requests/site_info/linkpreview", ["requests/fetcher", "colorful-console-logger"], function (exports_110, context_110) {
    "use strict";
    var fetcher_2, colorful_console_logger_1, CACHE_SECONDS;
    var __moduleName = context_110 && context_110.id;
    return {
        setters: [
            function (fetcher_2_1) {
                fetcher_2 = fetcher_2_1;
            },
            function (colorful_console_logger_1_1) {
                colorful_console_logger_1 = colorful_console_logger_1_1;
            }
        ],
        execute: function () {
            CACHE_SECONDS = 360000;
            exports_110("default", async (site) => {
                let data = {};
                try {
                    data = await fetcher_2.get(`https://api.linkpreview.net/?key=bbd06238f76c782e6e6d8743255351be&q=${site}`, {
                        ttl: CACHE_SECONDS
                    });
                }
                catch (e) {
                    colorful_console_logger_1.default.error("Error getSitePreview()", e);
                }
                // siteName = siteName.replace('https://', '');
                // siteName = siteName.replace('http://', '');
                // siteName = siteName.replace('www.', '');
                return data || null;
            });
        }
    };
});
System.register("requests/site_info/microlink", ["requests/fetcher", "colorful-console-logger"], function (exports_111, context_111) {
    "use strict";
    var fetcher_3, colorful_console_logger_2, CACHE_SECONDS;
    var __moduleName = context_111 && context_111.id;
    return {
        setters: [
            function (fetcher_3_1) {
                fetcher_3 = fetcher_3_1;
            },
            function (colorful_console_logger_2_1) {
                colorful_console_logger_2 = colorful_console_logger_2_1;
            }
        ],
        execute: function () {
            CACHE_SECONDS = 360000;
            exports_111("default", async (site) => {
                let data = {};
                try {
                    data = await fetcher_3.get(`https://api.microlink.io/?url=${site}`, {
                        ttl: CACHE_SECONDS
                    });
                }
                catch (e) {
                    colorful_console_logger_2.default.error("Error getSitePreview()", e);
                }
                // siteName = siteName.replace('https://', '');
                // siteName = siteName.replace('http://', '');
                // siteName = siteName.replace('www.', '');
                return data || null;
            });
        }
    };
});
