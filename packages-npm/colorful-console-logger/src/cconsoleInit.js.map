{"mappings":"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","sources":["src/cconsole.js","src/index.js","src/function/CConsoleLog.js","src/function/destroyCircular.js","src/function/serializeError.js"],"sourcesContent":["/*\n * Returns - initialized, ready to use\n */\nconst cconsoleInit = require(\"./index.js\");\nconst cconsole = cconsoleInit();\n\nif (typeof window === \"object\") {\n  window.cconsole = cconsole;\n}\n\nmodule.exports = cconsole;\n","const CConsoleLog = require(\"./function/CConsoleLog\");\n\n/**\n * Log to console, and optionally to your custom cloud functions\n *    In console, will color code each message:\n *        info: green\n *        warn: orange\n *        error: red\n *    Other methods (log, debug, trace, table, are not colored,\n *    because the coloring breaks Chrome developer tools console message)\n *\n * @param options {object} - options and settings\n *    See github project for more documentation and examples.\n * @param options.logToCloud {object} - an object of {key:value{function},} pairs\n *    Ex: {log:function(){}, info:function(){}, etc}\n *    Tested, and works well with LogDNA. `options.logToCloud = logdna.createLogger()`\n *    See github project for more documentation and examples.\n */\nconst cconsoleInit = function (options = {}) {\n  // so different actions (log/info/debug/etc) can communicate with eachother:\n  let sharedContext = {};\n  // log\n  let cconsole = {\n    updateOptions: function (newOptions = {}) {\n      for (let key in newOptions) {\n        options[key] = newOptions[key];\n      }\n    },\n    disable: function () {\n      options.disabled = true;\n    },\n    enable: function () {\n      options.disabled = false;\n    },\n    // custom (colorful) loggers\n    log: CConsoleLog.bind({ action: \"log\", options, sharedContext }),\n    info: CConsoleLog.bind({ action: \"info\", options, sharedContext }),\n    debug: CConsoleLog.bind({ action: \"debug\", options, sharedContext }),\n    warn: CConsoleLog.bind({ action: \"warn\", options, sharedContext }),\n    error_message: CConsoleLog.bind({ action: \"error_message\", options, sharedContext }),\n    error: CConsoleLog.bind({ action: \"error\", options, sharedContext }),\n    trace: CConsoleLog.bind({ action: \"trace\", options, sharedContext }),\n    success: CConsoleLog.bind({ action: \"success\", options, sharedContext }),\n    subtle: CConsoleLog.bind({ action: \"subtle\", options, sharedContext }),\n    // pass-through system debugging loggers\n    clear: console.clear,\n    time: console.time,\n    table: console.table,\n    timeEnd: console.timeEnd,\n    timeLog: console.timeLog,\n    assert: console.assert,\n    count: console.count,\n    countReset: console.countReset,\n    dir: console.dir,\n    dirxml: console.dirxml,\n    group: console.group,\n    groupCollapsed: console.groupCollapsed,\n    groupEnd: console.groupEnd\n  };\n  // extra pass-through (default) loggers (non-standard)\n  if (console.profile) {\n    cconsole.profile = console.profile;\n  }\n  if (console.profileEnd) {\n    cconsole.profileEnd = console.profileEnd;\n  }\n  if (console.timeStamp) {\n    cconsole.timeStamp = console.timeStamp;\n  }\n  // return console\n  return cconsole;\n};\n\n/*\n * Export cconsole\n */\nmodule.exports = cconsoleInit;\n","const destroyCircular = require(\"./destroyCircular\");\nconst serializeError = require(\"./serializeError\");\n\n// use \"browser\" colors if in browser\nlet NODEJSCOLORS = typeof window !== \"object\";\n// also use \"browser\" colors if in NodeJS with \"--inspect\" or \"--inspect-brk\" flag\n// if (NODEJSCOLORS && process.execArgv.join().includes(\"--inspect\")) {\n//   NODEJSCOLORS = false\n// }\n\n/*\n * Log to console\n */\nmodule.exports = function () {\n  let args = [...arguments];\n  // optionally, pass log-To-Cloud versions of each log action (log,info,error,etc.)\n  if (!this.options) this.options = {};\n  let { disabled, logToCloud = {}, useTrace = false, useColor = true, separateTypes = false } = this.options;\n  if (disabled) {\n    return;\n  }\n\n  /*\n   * option:\n   * trace file:line, where log originated\n   */\n  let trace = \"\";\n  if (useTrace) {\n    let stack = [];\n    let err = new Error();\n    if (err.stack) {\n      stack = err.stack.split(\"\\n\");\n      if (stack[2]) {\n        // determine file:line which called this console log\n        let str = stack[2];\n        let i_end = str.lastIndexOf(\":\");\n        let i_start_before = str.lastIndexOf(\"/\", i_end - 20) + 1;\n        trace = `(${str.substring(i_start_before, i_end)})`;\n      }\n    }\n  }\n\n  /*\n   * optimize message view\n   */\n  // let hasError = false\n  let a = 0;\n  while (a < args.length) {\n    // if first argument is string, give it a colon \": \"\n    if (a === 0 && typeof args[a] === \"string\") {\n      if (args.length > a + 1) {\n        args[a] += \": \";\n      } else {\n        args[a] += \" \";\n      }\n    }\n    // fix object from being printed as \"[object Object]\"\n    if (typeof args[a] === \"object\") {\n      if (args[a] instanceof Error) {\n        // error object\n        // hasError = true\n        try {\n          // going to assume this is an Error\n          args[a] = serializeError(args[a]);\n          if (typeof args[a] === \"object\") {\n            args[a] = serializeError(args[a].stack);\n          }\n        } catch (e) {\n          // console.error(e)\n        }\n      } else {\n        // regular object\n        // serialize so it does not display changes made after log has printed\n        args[a] = JSON.parse(JSON.stringify(destroyCircular(args[a], [])));\n      }\n    }\n    a++;\n  }\n\n  /*\n   * error - prepare message for output as string\n   */\n  let error_message = \"\";\n  if (this.action === \"error_message\") {\n    args[0] = error_message =\n      args[0] && typeof args[0] === \"string\"\n        ? args[0]\n            .split(\"\\n\")\n            .slice(0, 2)\n            .map((str) => str.replace(/\\/.+\\//g, \"\"))\n            .toString()\n        : \"error\";\n    this.action = \"error\";\n  }\n\n  /*\n   * color1 messages\n   *\n   * on NODE JS\n   * https://en.wikipedia.org/wiki/ANSI_escape_code#Colors <- use \"FG Code\" for text, \"BG Code\" for background\n   *\n   * \\x1b[41m     \\x1b[33m       %s        \\x1b[0m\n   * red bg       yellow text    string    escape for next line\n   *\n   * \\x1b[47m           \\x1b[30m       %s        \\x1b[0m\n   * light grey bg      black text     string    escape for next line\n   */\n  let action = this.action;\n  let color1 = \"\";\n  let color2 = \"\";\n  if (useColor && typeof args[0] === \"string\") {\n    /*\n     * use by NODEJS in terminal\n     */\n    if (NODEJSCOLORS) {\n      switch (this.action) {\n        case \"error\":\n          color1 = \"\\x1b[41m\\x1b[33m%s\\x1b[0m\";\n          break;\n        case \"warn\":\n          color1 = \"\\x1b[43m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"info\":\n          color1 = \"\\x1b[46m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"debug\":\n          color1 = \"\\x1b[45m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"trace\":\n          color1 = \"\\x1b[106m\\x1b[30m%s\\x1b[0m\";\n          break;\n        case \"success\":\n          color1 = \"\\x1b[42m\\x1b[30m%s\\x1b[0m\";\n          this.action = \"log\";\n          break;\n        case \"subtle\":\n          color1 = \"\\x1b[40m\\x1b[90m%s\\x1b[0m\";\n          this.action = \"log\";\n          break;\n      }\n    } else {\n      /*\n       * for use in BROWSER\n       */\n      switch (action) {\n        case \"error\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:red; color:yellow\");\n          break;\n        case \"warn\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:yellow; color:black\");\n          break;\n        case \"log\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:cyan; color:black\");\n          break;\n        case \"info\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:teal; color:black\");\n          break;\n        case \"debug\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:magenta; color:black\");\n          break;\n        case \"trace\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:cyan; color:black\");\n          break;\n        case \"success\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"background:lawngreen; color:black\");\n          break;\n        case \"subtle\":\n          args[0] = \"%c\" + args[0];\n          args.splice(1, 0, \"color:grey\");\n          break;\n      }\n    }\n  }\n\n  /*\n   * custom actions\n   */\n  switch (action) {\n    case \"success\":\n      action = \"log\";\n      break;\n    case \"subtle\":\n      action = \"log\";\n      break;\n  }\n\n  /*\n   * Add space between different types (groups) of messages\n   *    TODO: maybe upgrade this to use console.group in browser\n   */\n  if (separateTypes) {\n    if (action + this.action !== this.sharedContext.last_action) {\n      console.log(\"\");\n    }\n  }\n\n  /*\n   * Add trace (file-name:line-number)\n   */\n  // log color\n  if (color1) {\n    if (trace) {\n      // color1, trace\n      args = [color1, ...args, trace, color2];\n    } else {\n      // color1, no trace\n      args = [color1, ...args, color2];\n    }\n  } else if (trace) {\n    // no color1, trace\n    args = [...args, trace];\n  }\n\n  /*\n   * Log message to console\n   * use specified action (log, info, debug, warn, etc)\n   */\n  console[action](...args);\n\n  /*\n   * Log original content to cloud\n   */\n  if (logToCloud[action]) {\n    logToCloud[action](...arguments, trace);\n  }\n\n  /*\n   * Add linebreak when different actions back to back\n   * but no linebreak when same action\n   */\n  this.sharedContext.last_action = action + this.action;\n\n  /*\n   * return\n   */\n  if (error_message) {\n    return error_message;\n  }\n};\n","const destroyCircular = (from, seen) => {\n  // null seen as object\n  if (from === null || from === undefined) {\n    return from\n  }\n  // setup output variable\n  const to = Array.isArray(from) ? [] : {}\n  // reading\n  seen.push(from)\n  // iterate input\n  for (const [key, value] of Object.entries(from)) {\n    if (typeof value === 'function') {\n      continue\n    }\n    if (!value || typeof value !== 'object') {\n      to[key] = value\n      continue\n    }\n    if (!seen.includes(from[key])) {\n      to[key] = destroyCircular(from[key], seen.slice())\n      continue\n    }\n    to[key] = '[Circular]'\n  }\n  const commonProperties = [\n    'name',\n    'message',\n    'stack',\n    'code'\n  ]\n  for (const property of commonProperties) {\n    if (typeof from[property] === 'string') {\n      to[property] = from[property]\n    }\n  }\n  return to\n}\nmodule.exports = destroyCircular\n","const destroyCircular = require('./destroyCircular')\n\nmodule.exports = (value) => {\n  if (typeof value === 'object') {\n    return destroyCircular(value, [])\n  }\n  // People sometimes throw things besides Error objects…\n  if (typeof value === 'function') {\n    // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n    return `[Function: ${(value.name || 'anonymous')}]`\n  }\n  return value\n}\n"],"names":[],"version":3,"file":"cconsoleInit.js.map","sourceRoot":"../"}