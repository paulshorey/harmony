{"mappings":";;;;;;;;;;;;;;;;;;AGAA,MAAM,wCAAkB,CAAC,MAAM,OAAS;IACpC,sBAAsB;IACtB,IAAI,SAAS,IAAI,IAAI,SAAS,WAC1B,OAAO;IAEX,wBAAwB;IACxB,MAAM,KAAK,MAAM,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IACxC,UAAU;IACV,KAAK,IAAI,CAAC;IACV,gBAAgB;IAChB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,MAAO;QAC7C,IAAI,OAAO,UAAU,YACjB,QAAS;QAEb,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;YACrC,EAAE,CAAC,IAAI,GAAG;YACV,QAAS;QACb,CAAC;QACD,IAAI,CAAC,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG;YAC3B,EAAE,CAAC,IAAI,GAAG,sCAAgB,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK;YAC/C,QAAS;QACb,CAAC;QACD,EAAE,CAAC,IAAI,GAAG;IACd;IACA,MAAM,mBAAmB;QAAC;QAAQ;QAAW;QAAS;KAAO;IAC7D,KAAK,MAAM,YAAY,iBACnB,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,UAC1B,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS;IAGrC,OAAO;AACX;IACA,2CAAe;;ADhCf;AEAA;IACA,2CAAe,CAAC,QAAU;IACtB,IAAI,OAAO,UAAU,UACjB,OAAO,CAAA,GAAA,wCAAe,AAAD,EAAE,OAAO,EAAE;IAEpC,uDAAuD;IACvD,IAAI,OAAO,UAAU,YACjB,0FAA0F;IAC1F,OAAO,CAAC,WAAW,EAAE,MAAM,IAAI,IAAI,YAAY,CAAC,CAAC;IAErD,OAAO;AACX;;;AFTA,qCAAqC;AACrC,IAAI,qCAAe,OAAO,WAAW;AAQtB,oDAAY;IACvB,IAAI,OAAO;WAAI;KAAU;IACzB,kFAAkF;IAClF,IAAI,CAAC,IAAI,CAAC,OAAO,EACb,IAAI,CAAC,OAAO,GAAG,CAAC;IACpB,IAAI,YAAE,SAAQ,cAAE,aAAa,CAAC,cAAG,WAAW,KAAK,aAAE,WAAW,IAAI,kBAAE,gBAAgB,KAAK,GAAE,GAAG,IAAI,CAAC,OAAO;IAC1G,IAAI,UACA;IAEJ;;;KAGC,GACD,IAAI,QAAQ;IACZ,IAAI,UAAU;QACV,IAAI,QAAQ,EAAE;QACd,IAAI,MAAM,IAAI;QACd,IAAI,IAAI,KAAK,EAAE;YACX,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC;YACxB,IAAI,KAAK,CAAC,EAAE,EAAE;gBACV,oDAAoD;gBACpD,IAAI,MAAM,KAAK,CAAC,EAAE;gBAClB,IAAI,QAAQ,IAAI,WAAW,CAAC;gBAC5B,IAAI,iBAAiB,IAAI,WAAW,CAAC,KAAK,QAAQ,MAAM;gBACxD,QAAQ,CAAC,CAAC,EAAE,IAAI,SAAS,CAAC,gBAAgB,OAAO,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;IACL,CAAC;IACD;;KAEC,GACD,uBAAuB;IACvB,IAAI,IAAI;IACR,MAAO,IAAI,KAAK,MAAM,CAAE;QACpB,oDAAoD;QACpD,IAAI,MAAM,KAAK,OAAO,IAAI,CAAC,EAAE,KAAK;YAC9B,IAAI,KAAK,MAAM,GAAG,IAAI,GAClB,IAAI,CAAC,EAAE,IAAI;iBAGX,IAAI,CAAC,EAAE,IAAI;SAElB;QACD,qDAAqD;QACrD,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,UAAU;YAC7B,IAAI,IAAI,CAAC,EAAE,YAAY,OACnB,eAAe;YACf,kBAAkB;YAClB,IAAI;gBACA,mCAAmC;gBACnC,IAAI,CAAC,EAAE,GAAG,CAAA,GAAA,wCAAa,EAAE,IAAI,CAAC,EAAE;gBAChC,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,UACnB,IAAI,CAAC,EAAE,GAAG,CAAA,GAAA,wCAAc,AAAD,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK;YAE9C,EACA,OAAO,GAAG;YACN,mBAAmB;YACvB;iBAGA,iBAAiB;YACjB,sEAAsE;YACtE,IAAI,CAAC,EAAE,GAAG,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,CAAA,GAAA,wCAAe,AAAD,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;QAEvE,CAAC;QACD;IACJ;IACA;;KAEC,GACD,IAAI,gBAAgB;IACpB,IAAI,IAAI,CAAC,MAAM,KAAK,iBAAiB;QACjC,IAAI,CAAC,EAAE,GAAG,gBACN,IAAI,CAAC,EAAE,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,WACxB,IAAI,CAAC,EAAE,CACJ,KAAK,CAAC,MACN,KAAK,CAAC,GAAG,GACT,GAAG,CAAC,CAAC,MAAQ,IAAI,OAAO,CAAC,WAAW,KACpC,QAAQ,KACX,OAAO;QACjB,IAAI,CAAC,MAAM,GAAG;IAClB,CAAC;IACD;;;;;;;;;;;KAWC,GACD,IAAI,SAAS,IAAI,CAAC,MAAM;IACxB,IAAI,SAAS;IACb,IAAI,SAAS;IACb,IAAI,YAAY,OAAO,IAAI,CAAC,EAAE,KAAK;QAC/B;;SAEC,GACD,IAAI,oCACA,OAAQ,IAAI,CAAC,MAAM;YACf,KAAK;gBACD,SAAS;gBACT,KAAM;YACV,KAAK;gBACD,SAAS;gBACT,KAAM;YACV,KAAK;gBACD,SAAS;gBACT,KAAM;YACV,KAAK;gBACD,SAAS;gBACT,KAAM;YACV,KAAK;gBACD,SAAS;gBACT,KAAM;YACV,KAAK;gBACD,SAAS;gBACT,IAAI,CAAC,MAAM,GAAG;gBACd,KAAM;YACV,KAAK;gBACD,SAAS;gBACT,IAAI,CAAC,MAAM,GAAG;gBACd,KAAM;QACd;aAGA;;aAEC,GACD,OAAQ;YACJ,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;YACV,KAAK;gBACD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;gBACxB,KAAK,MAAM,CAAC,GAAG,GAAG;gBAClB,KAAM;QACd;KAEP;IACD;;KAEC,GACD,OAAQ;QACJ,KAAK;YACD,SAAS;YACT,KAAM;QACV,KAAK;YACD,SAAS;YACT,KAAM;IACd;IACA;;;KAGC,GACD,IAAI,eACA;QAAA,IAAI,SAAS,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,aAAa,CAAC,WAAW,EACvD,QAAQ,GAAG,CAAC;IAChB,CACH;IACD;;KAEC,GACD,YAAY;IACZ,IAAI;QACA,IAAI,OACA,gBAAgB;QAChB,OAAO;YAAC;eAAW;YAAM;YAAO;SAAO;aAGvC,mBAAmB;QACnB,OAAO;YAAC;eAAW;YAAM;SAAO;WAGnC,IAAI,OACL,mBAAmB;IACnB,OAAO;WAAI;QAAM;KAAM;IAE3B;;;KAGC,GACD,OAAO,CAAC,OAAO,IAAI;IACnB;;KAEC,GACD,IAAI,UAAU,CAAC,OAAO,EAClB,UAAU,CAAC,OAAO,IAAI,WAAW;IAErC;;;KAGC,GACD,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,SAAS,IAAI,CAAC,MAAM;IACrD;;KAEC,GACD,IAAI,eACA,OAAO;AAEf;;AD/OA;AACA;;;;;;;;;;;;;;;CAeC,GACD,MAAM,qCAAe,SAAU,UAAU,CAAC,CAAC,EAAE;IACzC,4EAA4E;IAC5E,IAAI,gBAAgB,CAAC;IACrB,MAAM;IACN,IAAI,WAAW;QACX,eAAe,SAAU,aAAa,CAAC,CAAC,EAAE;YACtC,IAAK,IAAI,OAAO,WACZ,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI;QAEtC;QACA,SAAS,WAAY;YACjB,QAAQ,QAAQ,GAAG,IAAI;QAC3B;QACA,QAAQ,WAAY;YAChB,QAAQ,QAAQ,GAAG,KAAK;QAC5B;QACA,4BAA4B;QAC5B,KAAK,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAO;2BAAS;QAAc;QAC9D,MAAM,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAQ;2BAAS;QAAc;QAChE,OAAO,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAS;2BAAS;QAAc;QAClE,MAAM,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAQ;2BAAS;QAAc;QAChE,eAAe,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAiB;2BAAS;QAAc;QAClF,OAAO,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAS;2BAAS;QAAc;QAClE,OAAO,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAS;2BAAS;QAAc;QAClE,SAAS,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAW;2BAAS;QAAc;QACtE,QAAQ,CAAA,GAAA,wCAAW,AAAD,EAAE,IAAI,CAAC;YAAE,QAAQ;qBAAU;2BAAS;QAAc;QACpE,wCAAwC;QACxC,OAAO,QAAQ,KAAK;QACpB,MAAM,QAAQ,IAAI;QAClB,OAAO,QAAQ,KAAK;QACpB,SAAS,QAAQ,OAAO;QACxB,SAAS,QAAQ,OAAO;QACxB,QAAQ,QAAQ,MAAM;QACtB,OAAO,QAAQ,KAAK;QACpB,YAAY,QAAQ,UAAU;QAC9B,KAAK,QAAQ,GAAG;QAChB,QAAQ,QAAQ,MAAM;QACtB,OAAO,QAAQ,KAAK;QACpB,gBAAgB,QAAQ,cAAc;QACtC,UAAU,QAAQ,QAAQ;IAC9B;IACA,sDAAsD;IACtD,IAAI,QAAQ,OAAO,EACf,SAAS,OAAO,GAAG,QAAQ,OAAO;IAEtC,IAAI,QAAQ,UAAU,EAClB,SAAS,UAAU,GAAG,QAAQ,UAAU;IAE5C,IAAI,QAAQ,SAAS,EACjB,SAAS,SAAS,GAAG,QAAQ,SAAS;IAE1C,iBAAiB;IACjB,OAAO;AACX;IACA;;CAEC,GACD,2CAAe;;AD1Ef;AAIO,MAAM,4CAAe,CAAA,GAAA,wCAAoB,AAAD;IAC/C,2CAAe,CAAA,GAAA,wCAAmB","sources":["modules/cconsole/esm/index.js","modules/cconsole/esm/cconsoleInit.js","modules/cconsole/esm/function/CConsoleLog.js","modules/cconsole/esm/function/destroyCircular.js","modules/cconsole/esm/function/serializeError.js"],"sourcesContent":["import cconsoleInitFunction from \"./cconsoleInit\";\n/*\n * Export BOTH the default (ready to use) and the named (to init with custom options).\n */\nexport const cconsoleInit = cconsoleInitFunction;\nexport default cconsoleInitFunction();\n","import CConsoleLog from \"./function/CConsoleLog\";\n/**\n * Log to console, and optionally to your custom cloud functions\n *    In console, will color code each message:\n *        info: green\n *        warn: orange\n *        error: red\n *    Other methods (log, debug, trace, table, are not colored,\n *    because the coloring breaks Chrome developer tools console message)\n *\n * @param options {object} - options and settings\n *    See github project for more documentation and examples.\n * @param options.logToCloud {object} - an object of {key:value{function},} pairs\n *    Ex: {log:function(){}, info:function(){}, etc}\n *    Tested, and works well with LogDNA. `options.logToCloud = logdna.createLogger()`\n *    See github project for more documentation and examples.\n */\nconst cconsoleInit = function (options = {}) {\n    // so different actions (log/info/debug/etc) can communicate with eachother:\n    let sharedContext = {};\n    // log\n    let cconsole = {\n        updateOptions: function (newOptions = {}) {\n            for (let key in newOptions) {\n                options[key] = newOptions[key];\n            }\n        },\n        disable: function () {\n            options.disabled = true;\n        },\n        enable: function () {\n            options.disabled = false;\n        },\n        // custom (colorful) loggers\n        log: CConsoleLog.bind({ action: \"log\", options, sharedContext }),\n        info: CConsoleLog.bind({ action: \"info\", options, sharedContext }),\n        debug: CConsoleLog.bind({ action: \"debug\", options, sharedContext }),\n        warn: CConsoleLog.bind({ action: \"warn\", options, sharedContext }),\n        error_message: CConsoleLog.bind({ action: \"error_message\", options, sharedContext }),\n        error: CConsoleLog.bind({ action: \"error\", options, sharedContext }),\n        trace: CConsoleLog.bind({ action: \"trace\", options, sharedContext }),\n        success: CConsoleLog.bind({ action: \"success\", options, sharedContext }),\n        subtle: CConsoleLog.bind({ action: \"subtle\", options, sharedContext }),\n        // pass-through system debugging loggers\n        clear: console.clear,\n        time: console.time,\n        table: console.table,\n        timeEnd: console.timeEnd,\n        timeLog: console.timeLog,\n        assert: console.assert,\n        count: console.count,\n        countReset: console.countReset,\n        dir: console.dir,\n        dirxml: console.dirxml,\n        group: console.group,\n        groupCollapsed: console.groupCollapsed,\n        groupEnd: console.groupEnd\n    };\n    // extra pass-through (default) loggers (non-standard)\n    if (console.profile) {\n        cconsole.profile = console.profile;\n    }\n    if (console.profileEnd) {\n        cconsole.profileEnd = console.profileEnd;\n    }\n    if (console.timeStamp) {\n        cconsole.timeStamp = console.timeStamp;\n    }\n    // return console\n    return cconsole;\n};\n/*\n * To init with custom options\n */\nexport default cconsoleInit;\n","import destroyCircular from \"./destroyCircular\";\nimport serializeError from \"./serializeError\";\n// use \"browser\" colors if in browser\nlet NODEJSCOLORS = typeof window !== \"object\";\n// also use \"browser\" colors if in NodeJS with \"--inspect\" or \"--inspect-brk\" flag\n// if (NODEJSCOLORS && process.execArgv.join().includes(\"--inspect\")) {\n//   NODEJSCOLORS = false\n// }\n/*\n * Log to console\n */\nexport default function () {\n    let args = [...arguments];\n    // optionally, pass log-To-Cloud versions of each log action (log,info,error,etc.)\n    if (!this.options)\n        this.options = {};\n    let { disabled, logToCloud = {}, useTrace = false, useColor = true, separateTypes = false } = this.options;\n    if (disabled) {\n        return;\n    }\n    /*\n     * option:\n     * trace file:line, where log originated\n     */\n    let trace = \"\";\n    if (useTrace) {\n        let stack = [];\n        let err = new Error();\n        if (err.stack) {\n            stack = err.stack.split(\"\\n\");\n            if (stack[2]) {\n                // determine file:line which called this console log\n                let str = stack[2];\n                let i_end = str.lastIndexOf(\":\");\n                let i_start_before = str.lastIndexOf(\"/\", i_end - 20) + 1;\n                trace = `(${str.substring(i_start_before, i_end)})`;\n            }\n        }\n    }\n    /*\n     * optimize message view\n     */\n    // let hasError = false\n    let a = 0;\n    while (a < args.length) {\n        // if first argument is string, give it a colon \": \"\n        if (a === 0 && typeof args[a] === \"string\") {\n            if (args.length > a + 1) {\n                args[a] += \": \";\n            }\n            else {\n                args[a] += \" \";\n            }\n        }\n        // fix object from being printed as \"[object Object]\"\n        if (typeof args[a] === \"object\") {\n            if (args[a] instanceof Error) {\n                // error object\n                // hasError = true\n                try {\n                    // going to assume this is an Error\n                    args[a] = serializeError(args[a]);\n                    if (typeof args[a] === \"object\") {\n                        args[a] = serializeError(args[a].stack);\n                    }\n                }\n                catch (e) {\n                    // console.error(e)\n                }\n            }\n            else {\n                // regular object\n                // serialize so it does not display changes made after log has printed\n                args[a] = JSON.parse(JSON.stringify(destroyCircular(args[a], [])));\n            }\n        }\n        a++;\n    }\n    /*\n     * error - prepare message for output as string\n     */\n    let error_message = \"\";\n    if (this.action === \"error_message\") {\n        args[0] = error_message =\n            args[0] && typeof args[0] === \"string\"\n                ? args[0]\n                    .split(\"\\n\")\n                    .slice(0, 2)\n                    .map((str) => str.replace(/\\/.+\\//g, \"\"))\n                    .toString()\n                : \"error\";\n        this.action = \"error\";\n    }\n    /*\n     * color1 messages\n     *\n     * on NODE JS\n     * https://en.wikipedia.org/wiki/ANSI_escape_code#Colors <- use \"FG Code\" for text, \"BG Code\" for background\n     *\n     * \\x1b[41m     \\x1b[33m       %s        \\x1b[0m\n     * red bg       yellow text    string    escape for next line\n     *\n     * \\x1b[47m           \\x1b[30m       %s        \\x1b[0m\n     * light grey bg      black text     string    escape for next line\n     */\n    let action = this.action;\n    let color1 = \"\";\n    let color2 = \"\";\n    if (useColor && typeof args[0] === \"string\") {\n        /*\n         * use by NODEJS in terminal\n         */\n        if (NODEJSCOLORS) {\n            switch (this.action) {\n                case \"error\":\n                    color1 = \"\\x1b[41m\\x1b[33m%s\\x1b[0m\";\n                    break;\n                case \"warn\":\n                    color1 = \"\\x1b[43m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"info\":\n                    color1 = \"\\x1b[46m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"debug\":\n                    color1 = \"\\x1b[45m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"trace\":\n                    color1 = \"\\x1b[106m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"success\":\n                    color1 = \"\\x1b[42m\\x1b[30m%s\\x1b[0m\";\n                    this.action = \"log\";\n                    break;\n                case \"subtle\":\n                    color1 = \"\\x1b[40m\\x1b[90m%s\\x1b[0m\";\n                    this.action = \"log\";\n                    break;\n            }\n        }\n        else {\n            /*\n             * for use in BROWSER\n             */\n            switch (action) {\n                case \"error\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:red; color:yellow\");\n                    break;\n                case \"warn\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:yellow; color:black\");\n                    break;\n                case \"log\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:cyan; color:black\");\n                    break;\n                case \"info\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:teal; color:black\");\n                    break;\n                case \"debug\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:magenta; color:black\");\n                    break;\n                case \"trace\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:cyan; color:black\");\n                    break;\n                case \"success\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:lawngreen; color:black\");\n                    break;\n                case \"subtle\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"color:grey\");\n                    break;\n            }\n        }\n    }\n    /*\n     * custom actions\n     */\n    switch (action) {\n        case \"success\":\n            action = \"log\";\n            break;\n        case \"subtle\":\n            action = \"log\";\n            break;\n    }\n    /*\n     * Add space between different types (groups) of messages\n     *    TODO: maybe upgrade this to use console.group in browser\n     */\n    if (separateTypes) {\n        if (action + this.action !== this.sharedContext.last_action) {\n            console.log(\"\");\n        }\n    }\n    /*\n     * Add trace (file-name:line-number)\n     */\n    // log color\n    if (color1) {\n        if (trace) {\n            // color1, trace\n            args = [color1, ...args, trace, color2];\n        }\n        else {\n            // color1, no trace\n            args = [color1, ...args, color2];\n        }\n    }\n    else if (trace) {\n        // no color1, trace\n        args = [...args, trace];\n    }\n    /*\n     * Log message to console\n     * use specified action (log, info, debug, warn, etc)\n     */\n    console[action](...args);\n    /*\n     * Log original content to cloud\n     */\n    if (logToCloud[action]) {\n        logToCloud[action](...arguments, trace);\n    }\n    /*\n     * Add linebreak when different actions back to back\n     * but no linebreak when same action\n     */\n    this.sharedContext.last_action = action + this.action;\n    /*\n     * return\n     */\n    if (error_message) {\n        return error_message;\n    }\n}\n","const destroyCircular = (from, seen) => {\n    // null seen as object\n    if (from === null || from === undefined) {\n        return from;\n    }\n    // setup output variable\n    const to = Array.isArray(from) ? [] : {};\n    // reading\n    seen.push(from);\n    // iterate input\n    for (const [key, value] of Object.entries(from)) {\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (!seen.includes(from[key])) {\n            to[key] = destroyCircular(from[key], seen.slice());\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    const commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\n    for (const property of commonProperties) {\n        if (typeof from[property] === \"string\") {\n            to[property] = from[property];\n        }\n    }\n    return to;\n};\nexport default destroyCircular;\n","import destroyCircular from \"./destroyCircular\";\nexport default (value) => {\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    // People sometimes throw things besides Error objects…\n    if (typeof value === \"function\") {\n        // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n"],"names":[],"version":3,"file":"index.js.map"}