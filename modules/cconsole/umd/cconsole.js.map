{"mappings":"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","sources":["modules/cconsole/esm/function/destroyCircular.js","modules/cconsole/esm/function/serializeError.js","modules/cconsole/esm/function/CConsoleLog.js","modules/cconsole/esm/cconsoleInit.js","modules/cconsole/esm/cconsole.js"],"sourcesContent":["const destroyCircular = (from, seen) => {\n    // null seen as object\n    if (from === null || from === undefined) {\n        return from;\n    }\n    // setup output variable\n    const to = Array.isArray(from) ? [] : {};\n    // reading\n    seen.push(from);\n    // iterate input\n    for (const [key, value] of Object.entries(from)) {\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (!seen.includes(from[key])) {\n            to[key] = destroyCircular(from[key], seen.slice());\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    const commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\n    for (const property of commonProperties) {\n        if (typeof from[property] === \"string\") {\n            to[property] = from[property];\n        }\n    }\n    return to;\n};\nexport default destroyCircular;\n","import destroyCircular from \"./destroyCircular.js\";\nexport default (value) => {\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    // People sometimes throw things besides Error objectsâ€¦\n    if (typeof value === \"function\") {\n        // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n","import destroyCircular from \"./destroyCircular.js\";\nimport serializeError from \"./serializeError.js\";\n// use \"browser\" colors if in browser\nlet NODEJSCOLORS = typeof window !== \"object\";\n// also use \"browser\" colors if in NodeJS with \"--inspect\" or \"--inspect-brk\" flag\n// if (NODEJSCOLORS && process.execArgv.join().includes(\"--inspect\")) {\n//   NODEJSCOLORS = false\n// }\n/*\n * Log to console\n */\nexport default function () {\n    let args = [...arguments];\n    // optionally, pass log-To-Cloud versions of each log action (log,info,error,etc.)\n    if (!this.options)\n        this.options = {};\n    let { disabled, logToCloud = {}, useTrace = false, useColor = true, separateTypes = false } = this.options;\n    if (disabled) {\n        return;\n    }\n    /*\n     * option:\n     * trace file:line, where log originated\n     */\n    let trace = \"\";\n    if (useTrace) {\n        let stack = [];\n        let err = new Error();\n        if (err.stack) {\n            stack = err.stack.split(\"\\n\");\n            if (stack[2]) {\n                // determine file:line which called this console log\n                let str = stack[2];\n                let i_end = str.lastIndexOf(\":\");\n                let i_start_before = str.lastIndexOf(\"/\", i_end - 20) + 1;\n                trace = `(${str.substring(i_start_before, i_end)})`;\n            }\n        }\n    }\n    /*\n     * optimize message view\n     */\n    // let hasError = false\n    let a = 0;\n    while (a < args.length) {\n        // if first argument is string, give it a colon \": \"\n        if (a === 0 && typeof args[a] === \"string\") {\n            if (args.length > a + 1) {\n                args[a] += \": \";\n            }\n            else {\n                args[a] += \" \";\n            }\n        }\n        // fix object from being printed as \"[object Object]\"\n        if (typeof args[a] === \"object\") {\n            if (args[a] instanceof Error) {\n                // error object\n                // hasError = true\n                try {\n                    // going to assume this is an Error\n                    args[a] = serializeError(args[a]);\n                    if (typeof args[a] === \"object\") {\n                        args[a] = serializeError(args[a].stack);\n                    }\n                }\n                catch (e) {\n                    // console.error(e)\n                }\n            }\n            else {\n                // regular object\n                // serialize so it does not display changes made after log has printed\n                args[a] = JSON.parse(JSON.stringify(destroyCircular(args[a], [])));\n            }\n        }\n        a++;\n    }\n    /*\n     * error - prepare message for output as string\n     */\n    let error_message = \"\";\n    if (this.action === \"error_message\") {\n        args[0] = error_message =\n            args[0] && typeof args[0] === \"string\"\n                ? args[0]\n                    .split(\"\\n\")\n                    .slice(0, 2)\n                    .map((str) => str.replace(/\\/.+\\//g, \"\"))\n                    .toString()\n                : \"error\";\n        this.action = \"error\";\n    }\n    /*\n     * color1 messages\n     *\n     * on NODE JS\n     * https://en.wikipedia.org/wiki/ANSI_escape_code#Colors <- use \"FG Code\" for text, \"BG Code\" for background\n     *\n     * \\x1b[41m     \\x1b[33m       %s        \\x1b[0m\n     * red bg       yellow text    string    escape for next line\n     *\n     * \\x1b[47m           \\x1b[30m       %s        \\x1b[0m\n     * light grey bg      black text     string    escape for next line\n     */\n    let action = this.action;\n    let color1 = \"\";\n    let color2 = \"\";\n    if (useColor && typeof args[0] === \"string\") {\n        /*\n         * use by NODEJS in terminal\n         */\n        if (NODEJSCOLORS) {\n            switch (this.action) {\n                case \"error\":\n                    color1 = \"\\x1b[41m\\x1b[33m%s\\x1b[0m\";\n                    break;\n                case \"warn\":\n                    color1 = \"\\x1b[43m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"info\":\n                    color1 = \"\\x1b[46m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"debug\":\n                    color1 = \"\\x1b[45m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"trace\":\n                    color1 = \"\\x1b[106m\\x1b[30m%s\\x1b[0m\";\n                    break;\n                case \"success\":\n                    color1 = \"\\x1b[42m\\x1b[30m%s\\x1b[0m\";\n                    this.action = \"log\";\n                    break;\n                case \"subtle\":\n                    color1 = \"\\x1b[40m\\x1b[90m%s\\x1b[0m\";\n                    this.action = \"log\";\n                    break;\n            }\n        }\n        else {\n            /*\n             * for use in BROWSER\n             */\n            switch (action) {\n                case \"error\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:red; color:yellow\");\n                    break;\n                case \"warn\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:yellow; color:black\");\n                    break;\n                case \"log\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:cyan; color:black\");\n                    break;\n                case \"info\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:teal; color:black\");\n                    break;\n                case \"debug\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:magenta; color:black\");\n                    break;\n                case \"trace\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:cyan; color:black\");\n                    break;\n                case \"success\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"background:lawngreen; color:black\");\n                    break;\n                case \"subtle\":\n                    args[0] = \"%c\" + args[0];\n                    args.splice(1, 0, \"color:grey\");\n                    break;\n            }\n        }\n    }\n    /*\n     * custom actions\n     */\n    switch (action) {\n        case \"success\":\n            action = \"log\";\n            break;\n        case \"subtle\":\n            action = \"log\";\n            break;\n    }\n    /*\n     * Add space between different types (groups) of messages\n     *    TODO: maybe upgrade this to use console.group in browser\n     */\n    if (separateTypes) {\n        if (action + this.action !== this.sharedContext.last_action) {\n            console.log(\"\");\n        }\n    }\n    /*\n     * Add trace (file-name:line-number)\n     */\n    // log color\n    if (color1) {\n        if (trace) {\n            // color1, trace\n            args = [color1, ...args, trace, color2];\n        }\n        else {\n            // color1, no trace\n            args = [color1, ...args, color2];\n        }\n    }\n    else if (trace) {\n        // no color1, trace\n        args = [...args, trace];\n    }\n    /*\n     * Log message to console\n     * use specified action (log, info, debug, warn, etc)\n     */\n    console[action](...args);\n    /*\n     * Log original content to cloud\n     */\n    if (logToCloud[action]) {\n        logToCloud[action](...arguments, trace);\n    }\n    /*\n     * Add linebreak when different actions back to back\n     * but no linebreak when same action\n     */\n    this.sharedContext.last_action = action + this.action;\n    /*\n     * return\n     */\n    if (error_message) {\n        return error_message;\n    }\n}\n","import CConsoleLog from \"./function/CConsoleLog.js\";\n/**\n * Log to console, and optionally to your custom cloud functions\n *    In console, will color code each message:\n *        info: green\n *        warn: orange\n *        error: red\n *    Other methods (log, debug, trace, table, are not colored,\n *    because the coloring breaks Chrome developer tools console message)\n *\n * @param options {object} - options and settings\n *    See github project for more documentation and examples.\n * @param options.logToCloud {object} - an object of {key:value{function},} pairs\n *    Ex: {log:function(){}, info:function(){}, etc}\n *    Tested, and works well with LogDNA. `options.logToCloud = logdna.createLogger()`\n *    See github project for more documentation and examples.\n */\nconst cconsoleInit = function (options = {}) {\n    // so different actions (log/info/debug/etc) can communicate with eachother:\n    let sharedContext = {};\n    // log\n    let cconsole = {\n        updateOptions: function (newOptions = {}) {\n            for (let key in newOptions) {\n                options[key] = newOptions[key];\n            }\n        },\n        disable: function () {\n            options.disabled = true;\n        },\n        enable: function () {\n            options.disabled = false;\n        },\n        // custom (colorful) loggers\n        log: CConsoleLog.bind({ action: \"log\", options, sharedContext }),\n        info: CConsoleLog.bind({ action: \"info\", options, sharedContext }),\n        debug: CConsoleLog.bind({ action: \"debug\", options, sharedContext }),\n        warn: CConsoleLog.bind({ action: \"warn\", options, sharedContext }),\n        error_message: CConsoleLog.bind({ action: \"error_message\", options, sharedContext }),\n        error: CConsoleLog.bind({ action: \"error\", options, sharedContext }),\n        trace: CConsoleLog.bind({ action: \"trace\", options, sharedContext }),\n        success: CConsoleLog.bind({ action: \"success\", options, sharedContext }),\n        subtle: CConsoleLog.bind({ action: \"subtle\", options, sharedContext }),\n        // pass-through system debugging loggers\n        clear: console.clear,\n        time: console.time,\n        table: console.table,\n        timeEnd: console.timeEnd,\n        timeLog: console.timeLog,\n        assert: console.assert,\n        count: console.count,\n        countReset: console.countReset,\n        dir: console.dir,\n        dirxml: console.dirxml,\n        group: console.group,\n        groupCollapsed: console.groupCollapsed,\n        groupEnd: console.groupEnd\n    };\n    // extra pass-through (default) loggers (non-standard)\n    if (console.profile) {\n        cconsole.profile = console.profile;\n    }\n    if (console.profileEnd) {\n        cconsole.profileEnd = console.profileEnd;\n    }\n    if (console.timeStamp) {\n        cconsole.timeStamp = console.timeStamp;\n    }\n    // return console\n    return cconsole;\n};\n/*\n * To init with custom options\n */\nexport default cconsoleInit;\n","import cconsoleInit from \"./cconsoleInit.js\";\n/*\n * Ready to use cconsole.success('label',data)\n */\nexport default cconsoleInit();\n"],"names":["$2b1909748f3d3a3c$var$destroyCircular","from","seen","to","Array","isArray","push","key","value","Object","entries","includes","slice","commonProperties","property","$2b1909748f3d3a3c$export$2e2bcd8739ae039","$a9ddfc3c530428bb$export$2e2bcd8739ae039","name","$09df1ec9f1961d09$var$NODEJSCOLORS","window","$09df1ec9f1961d09$export$2e2bcd8739ae039","args","arguments","this","options","disabled","logToCloud","useTrace","useColor","separateTypes","trace","stack","err","Error","split","str","i_end","lastIndexOf","i_start_before","substring","a","length","e","JSON","parse","stringify","error_message","action","map","replace","toString","color1","color2","splice","sharedContext","last_action","console","log","cconsole","updateOptions","newOptions","disable","enable","bind","info","debug","warn","error","success","subtle","clear","time","table","timeEnd","timeLog","assert","count","countReset","dir","dirxml","group","groupCollapsed","groupEnd","profile","profileEnd","timeStamp"],"version":3,"file":"cconsole.js.map"}